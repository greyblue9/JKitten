pi
print(sys.executable)
print("_gdb" in sys.modules)
attach-to python3
bt
attach-to python3
add-symbol-file /data/media/0/src/python39/build/libpython3.9.so.1.0 
bt
symbol-file /data/media/0/src/python39/build/python.exe
bt
bt f
symbol-file /data/media/0/src/python39/out/opt/python39/bin/python3.9
bt f
symbol-file python3.9 
bt f
i obj
i sh 
mt i sect
symbol-file /data/media/0/src/python39/build/python.exe .text 0x000203c0
symbol-file /data/media/0/src/python39/build/python.exe 0x000203c0 .text 
add-symbol-file /data/media/0/src/python39/build/python.exe 0x000203c0 .text 
add-symbol-file /data/media/0/src/python39/build/python.exe .text 0x000203c0
help add-symbol-file /data/media/0/src/python39/build/python.exe .text 0x000203c0
add-symbol-file /data/media/0/src/python39/build/python.exe 0x000203c0 -s .text
add-symbol-file /data/media/0/src/python39/build/python.exe -s .text 0x000203c0
bt
mt i sect
mt i sect obj
mt i sect allobj
mt i sect ALL
mt i sect ALLOBJECTS
mt i sect ALL_OBJECTS
mt i sect ALL
help mt i sect
mt i sect -all-objects
bt f
r
bt
py-bt
shell rundir  "/data/media/0/src/sschatbot/src" git remote -v
      proto = fnln[fnln.index(":")+1:-1].lstrip()
def info_functions(regex):
  results = []
  parts = [part.strip() for part in re.compile(r"(?=(\n|^)File [^\n]+:(?=\n|$))", re.DOTALL).split(gdb.execute("info functions -q -n {}".format(regex), False, True)) if part.strip()]
  for part in parts:
    srcfile = part.splitlines()[0][5:-1]
    fnlns = part.splitlines()[1:]
    for fnln in fnlns:
      lineno = int(fnln[0:fnln.index(":")], 10)
      proto = fnln[fnln.index(":")+1:-1].lstrip()
      results.append((srcfile, lineno, proto))
  return results
  return results
edit_func(gdb_extras.get_info_functions_meta)
printdict3(funcs)
printdict3(gdb_extras.get_info_functions_meta(gdb_extras.info_functions("Thread"),True))
printdict3(gdb_extras.get_info_functions_meta(gdb_extras.info_functions("Thread"),True))
printdict3(gdb_extras.get_info_functions_meta(gdb_extras.info_functions("Thread"),True))
funcs[0]["name"]
bb Thread
r
show verbose
gdb.execute("show verbose")
edit_func(gdb_extras.info_functions)
pi
globals().update(_it := list(printException())[0])
/external_sd/_projects/sdk/jack/jack-lambda-jack-lambda/jack-tests/prebuilts/core-hostdex.jar
bb Thread\|Fork\|Spawn
ee.__traceback__.tb_next.tb_frame.f_locals
printdict3(ee.__traceback__.tb_next.tb_frame.f_locals)
bb Spawn\|Thread\|Pool
r
up
i thr
t 1
up
r
catchall
c
del br 79
c
c
del br
bb Spawn\|[tT]hread\|Pool
catchall
c
show conv
p $_
p $_siginfo
p $_siginfo.si_code

p $_siginfo.si_signo == 5 && $_siginfo.si_code != 133
del br 387
catch syscall if $_siginfo.si_signo == 5 && $_siginfo.si_code != 133
catch syscall tgkill
catch syscall kill
catch syscall set_tid_address
catch syscall setns
c
cpi
pi
gdb.events.new_thread.connect(lambda *a: print(a))
k
del br
r
pi gdb.events.new_thread.connect(lambda *a: (print(a),setattr(__import__("main"),"ntd",a)))
c
pi gdb.events.new_thread.connect(lambda *a: (print(a),setattr(__import__("__main__"),"ntd",a)))
r
r
pi gdb.events.new_thread.connect(lambda *a: (print(a),setattr(__import__("__main__"),"ntd",a),gdb.execute(f"b *{gdb.selected_frame().pc()}"))
pi gdb.events.new_thread.connect(lambda *a: (print(a),setattr(__import__("__main__"),"ntd",a),gdb.execute(f"b *{gdb.selected_frame().pc()}")))
c
k
r
k
pi gdb.events.new_thread.connect(lambda *a: (print(a),setattr(__import__("__main__"),"ntd",a),gdb.execute("interrupt")))
r
bt
py-bt-f
pi s=gdb.execute('py-bt-f',False,True); setClip(s); 
