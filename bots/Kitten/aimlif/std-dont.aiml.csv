0,CAN I ANALYZE THE DIALOGUES COLLECTED BY THE APPLET,*,*,<br/>#NewlineIf the web server produces an access_log file#Comma such<br/>#Newlineas /var/log/httpd/access_log#Comma then the server records<br/>#NewlineApplet dialogue in the access_log file.  You may use<br/>#Newlineftp to download the access_log file to your machine;<br/>#Newlinethen run program B to analyze it.  <br/>#Newline<br/>#NewlineGo to the Options menu and find the value for "AnalysisFile".<br/>#NewlineThe Classify function operates on the data in the AnalysisFile.<br/>#NewlineBy default the AnalysisFile is the same as the LogFile (the<br/>#Newlinecurrent server log file).  But you can change the analysis<br/>#Newlinefile to another name#Comma such as /var/log/httpd/access_log or<br/>#Newlinejust access_log.<br/>#Newline<br/>,std-dont.aiml
0,CAN I BUILD ON TOP OF THE ALICE CODE RATHER THAN CHANGING IT,*,*,<br/>#NewlineAbsolutely. You only have to change her name#Comma location#Comma birthday and/or<br/>#Newlinebotmaster#Comma and put a couple of references to yourself.  Then add new<br/>#Newlinecategories that cover your own area of expertise or interest.<br/>#Newline<br/>,std-dont.aiml
0,CAN I CHANGE THE NAME OF THE ROBOT,*,*,<br/>#NewlineThe AIML tag &lt;name/&gt; inserts the name of the Bot wherever it appears.<br/>#NewlineThe default robot name is "ALICE" but you can change it in the<br/>#Newline"Options menu".  Select "Show Options" and replace "ALICE" with the <br/>#Newlinename of your bot#Comma and then do "Save Options".  Depending on your<br/>#Newlinestate#Comma you may need to restart program B. <br/>#Newline<br/>,std-dont.aiml
0,CAN I CREATE A LANGUAGE SPECIFIC INSTALLTION,*,*,<br/>#NewlineYes.  The file "language.txt" controls the language of the <br/>#Newlinebuttons and menus in the ALICE GUI.  If the file is missing#Comma<br/>#Newlinethe program uses English names by default.  To see an<br/>#Newlineexample of a language-specific installation#Comma copy the<br/>#Newlinefile "Germanlanguage.txt" to "language.txt" and start<br/>#Newlineprogram B.  <br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,CAN I CREATE MORE AIML TAGS,*,*,<br/>#NewlineAIML is extensible.  You can create an infinite number of<br/>#Newlinenew tags for foreign language pronouns#Comma predicates#Comma or<br/>#Newlineapplication-specific properties.  The file "predicates.txt"<br/>#Newlinedefines any new predicate tags.  "Predicate tags" mean<br/>#Newlinetags that have a client-specific "set" and "get" method.<br/>#NewlinePronouns like "it" and "he" have predicate tags like<br/>#Newline&lt;set_it&gt;&lt;/set_it&gt; and &lt;get_he/&gt;.  AIML has a number of<br/>#Newlinethese built-in tags for common English pronouns.<br/>#Newline<br/>#NewlineThere are two varieties of extensible predicate tags.<br/>#NewlineThe first example illustrates the use of new tags <br/>#Newlinefor foreign language pronouns.  The Japanese language<br/>#Newlinepronoun "kare" means "he".  In predicates.txt#Comma we<br/>#Newlinecan add a line of the form:<br/>#Newline<br/>#Newlinekare=dare<br/>#Newline<br/>#NewlineThis single line automatically generates the tags<br/>#Newline&lt;set_kare&gt; X &lt;/set_kare&gt; to set the value of "kare"<br/>#Newlineto X#Comma and the tag &lt;get_kare/&gt; to retrieve the value.<br/>#NewlineBy default#Comma &lt;get_kare/&gt; returns "dare" ("who?").  <br/>#Newline<br/>#NewlineNow we can create two AIML categories for an elementary<br/>#NewlineJapanese conversation:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;KARE WA * DESU&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;star/&gt; wa &lt;set_kare&gt;&lt;star/&gt;&lt;/set_kare&gt; desu.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;KARE WA * DESU KA&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;get_kare/&gt; desu ka? &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline&lt;category&gt;<br/>#Newline<br/>#NewlineThese two categories produce a coherent conversation<br/>#Newlineabout Mr. Arimoto:<br/>#Newline<br/>#NewlineClient: KARE WA DARE DESU KA<br/>#NewlineRobot: dare desu ka?<br/>#NewlineClient: KARE WA ARIMOTO SAN DESU<br/>#NewlineRobot: arimoto san wa kare desu.<br/>#NewlineClient: KARE WA DARE DESU KA<br/>#NewlineRobot: arimoto san desu ka?<br/>#Newline<br/>#NewlineNotice that the program replaces &lt;set_kare/&gt;&lt;star/&gt;&lt;/set_kare&gt; <br/>#Newlinewith "kare"#Comma the default value of this tag.  Sometimes however<br/>#Newlinethe default value of the tag is not the best choice for<br/>#Newlinethe set tag to return.  The second type of predicate tag <br/>#Newlinereplaces the set tag markup with the original string<br/>#Newlineinside the markup.  <br/>#Newline<br/>#NewlineTo create a predicate tag "has" we add the following line<br/>#Newlineto predicates.txt:<br/>#Newline<br/>#Newlinehas=*mother<br/>#Newline<br/>#NewlineThe default value of &lt;get_has/&gt; is "mother" (because<br/>#Newlineeveryone has a mother).  The "*" here indicates that<br/>#Newlinethe program should replace &lt;set_has&gt; X &lt;/set_has&gt;<br/>#Newlinewith X.  <br/>#Newline<br/>#NewlineHere we write two AIML categories to demonstrate the<br/>#Newline"has" predicate:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;I HAVE A *&lt;/pattern&gt;<br/>#Newline&lt;template&gt;Where did you get <br/>#Newline&lt;set_it&gt;&lt;set_has&gt;&lt;person/&gt;&lt;/set_has&gt;&lt;/set_it&gt;?<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHAT DO I HAVE&lt;/pattern&gt;<br/>#Newline&lt;template&gt;Tell me more about your &lt;get_has/&gt;. &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineNotice that the first category embeds &lt;set_has&gt; in &lt;set_it&gt;#Comma<br/>#Newlineso that the value of &lt;person/&gt; becomes both "it" and "has".<br/>#NewlineThe resulting dialogue:<br/>#Newline<br/>#NewlineClient: WHAT DO I HAVE<br/>#NewlineRobot: Tell me more about your mother.<br/>#NewlineClient: I HAVE A BOX<br/>#NewlineRobot: Where did you get it?<br/>#NewlineClient: WHAT DO I HAVE<br/>#NewlineRobot: Tell me more about your box.<br/>#Newline<br/>#NewlineLook at the file "predicates.txt" for several more <br/>#Newlineexamples of custom AIML tags#Comma including the German<br/>#Newline&lt;set_sie&gt;#Comma &lt;set_er&gt; and &lt;set_es&gt;.<br/>#Newline<br/>,std-dont.aiml
0,CAN I HAVE A PRIVATE CONVERSATION WITH ALICE,*,*,<br/>#NewlineThe ALICE server logs and records all conversations.  Even the ALICE<br/>#NewlineApplet tries to transmit conversation logs back to the originating server.<br/>#NewlineYou can have a private conversation with ALICE#Comma however#Comma if you download<br/>#NewlineProgram B to your own computer and run it there.  Running on your machine#Comma<br/>#Newlinethe server stores all the conversations locally.<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,CAN I INCLUDE JAVASCRIPT IN THE ROBOT REPLY,*,*,<br/>#NewlineYes.  You can include any HTML including &lt;script&gt; tags.  Suppose you<br/>#Newlinewant to "chat AND browse#Comma" in other words#Comma have the robot open<br/>#Newlineup a new browser window when she provides a URL link.  Here's a category that<br/>#Newlinekicks out a piece of HTML/scripting that opens a new window with and loads a<br/>#Newlinegiven URL.   This is handy for search engines or showing off one's web page.<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline &lt;pattern&gt; WHERE IS YOUR WEB SITE &lt;/pattern&gt;<br/>#Newline &lt;template&gt;<br/>#Newline    It's at "http://www.geocities.com/krisdrent/"<br/>#Newline    &lt;script language="JavaScript"&gt;<br/>#Newline   // Go to &lt;a href="http://www.geocities.com/krisdrent"&gt;The ALICE<br/>#NewlineConnection&lt;/a&gt;<br/>#Newline   &lt;!--<br/>#Newline   window.open("http://www.geocities.com/krisdrent/")<br/>#Newline   --&gt;<br/>#Newline  &lt;/script&gt;<br/>#Newline &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineA couple of things to note about this technique:  #1#Comma this will only work<br/>#Newlinewhen ALICE is being talked to from a browser that runs JavaScript#Comma i.e. it<br/>#Newlinewon't work in the applet.  We have tested it in Netscape and MS Internet<br/>#NewlineExplorer#Comma and it works well in both.  #2.  For the above reason#Comma it is<br/>#Newlineimportant to have some sort of explanatory statement before the scripting in<br/>#Newlinecase the scripting isn't supported.  Besides#Comma you want some response in your<br/>#NewlineALICE window#Comma even if another window DOES come up.  #3.  If this is viewed<br/>#Newlinein a browser that doesn't understand the &lt;script&gt; tag#Comma notice that this line<br/>#Newlinewill show up:<br/>#Newline"// Go to &lt;a href="http://www.geocities.com/krisdrent"&gt;The ALICE<br/>#NewlineConnection&lt;/a&gt;"<br/>#NewlineWhich is good#Comma because it gives a back-up for the "non-scripted" (the Lynx<br/>#Newlineusers#Comma I guess.)  And remember that you have to keep the "//" in front of<br/>#Newlineany non-java-script lines within the &lt;script&gt; tag.<br/>#Newline<br/>,std-dont.aiml
0,CAN I INSERT DYNAMIC HTML INTO THE ROBOT REPLY,*,*,<br/>#NewlineIf you are fortunate enough to be running lynx under Linux#Comma the <br/>#Newlinefollowing markup is a simple way to "inline" the results of an HTTP <br/>#Newlinerequest into the chat robot reply.   Try asking ALICE:<br/>#Newline"What chatterbots do you know?" and she will reply with a page<br/>#Newlineof links generated by the Google search engine.<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHAT *&lt;/pattern&gt;<br/>#Newline&lt;template&gt;<br/>#NewlineHere is the information I found:<br/>#Newline&lt;system&gt;<br/>#Newlinelynx -dump -source -image_links http://www.google.com/search?q=&lt;personf/&gt;<br/>#Newline&lt;/system&gt;<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>,std-dont.aiml
0,CAN I RUN PROGRAM B IN THE BACKGROUND ON A NT SERVER,*,*,<br/>#NewlineYes. Set up your PC / Server to run Alice B as you normal. (Download the Java<br/>#NewlineDevelopers Kit#Comma etc.)<br/>#Newline<br/>#NewlineCreate a Batch file#Comma in folder B containing only this text.<br/>#Newline<br/>#Newline'jview bterm'<br/>#Newline<br/>#NewlineCreate a task in the Task Schedule Wizard to run the batch file. (Ensure the<br/>#Newlinetask starts in drive:\path\B'<br/>#Newline<br/>#NewlineGive the Task Schedule an appropriate Logon and password for the Server or<br/>#NewlinePC.<br/>#Newline<br/>#NewlineRight-click#Comma select Run now#Comma and log on and off as you like.<br/>#Newline<br/>,std-dont.aiml
0,CAN I RUN SHELL COMMANDS FROM AIML SCRIPTS,*,*,<br/>#NewlineYes.  Use the &lt;system&gt;X&lt;/system&gt; tag to run the shell command X.<br/>#NewlineThe command X is assumed to produce its output in line-oriented<br/>#Newlineformat suitable for a BufferdReader to read line by line.  <br/>#NewlineA simple example of this command in an AIML script is:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHAT TIME IS IT&lt;/pattern&gt;<br/>#Newline&lt;template&gt;The local time is: &lt;system&gt;date&lt;/system&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThe "date" command is a system command that generates a text<br/>#Newlinestring containing the date and time.  (Note that this might<br/>#Newlinenot work on Windows).<br/>#Newline <br/>#NewlineTake extreme care in using the &lt;system&gt; tag because it <br/>#Newlinepotentially permits remote clients to run a command on<br/>#Newlineyour system.  <br/>#Newline<br/>,std-dont.aiml
0,CAN I RUN THE WEB SERVER AS A DAEMON PROCESS,*,*,<br/>#NewlineYes.  There is a class file called Bterm.java in the<br/>#Newlineprogram B distribution.   Bterm runs the web server<br/>#Newlineas a console application#Comma with no GUI.  You can<br/>#Newlineredirect the output of program Bterm to a log file<br/>#Newlineand start the process in the background with<br/>#Newline"java Bterm &gt; B.log &amp;" (assuming a Unix shell). <br/>#Newline<br/>,std-dont.aiml
0,CAN I SPEAK TO THE ROBOT WITH VOICE INPUT,*,*,<br/>#NewlineOne simple experiment that works well as a demo<br/>#Newlineinvolves using IBM ViaVoice (tm) speech recognition<br/>#Newlinesoftware on a Windows platform.  At the same time#Comma<br/>#Newlinerun the ALICE program B web server and activate the<br/>#NewlineMS Agent interface.  The ViaVoice software allows<br/>#Newlineyou to dictate into an application called VoicePad#Comma<br/>#Newlinebut not directly into the browser.  You have to<br/>#Newlineuse "cut" and "paste" to move your speech inputs<br/>#Newlineinto the browser form for ALICE.  But the net effect<br/>#Newlineis a somewhat slow voice-in voice-out conversation<br/>#Newlinewith ALICE.  <br/>#Newline<br/>#NewlineThe ViaVoice software seems to work well with ALICE<br/>#Newlineafter some training.  We trained it with the file<br/>#Newline"patterns.txt" created with the "List Patterns" command.<br/>#Newline<br/>,std-dont.aiml
0,CAN I TEST THE ROBOT OFFLINE ON MY DESKTOP,*,*,<br/>#NewlineYes.  You can run the program B server and connect to it with<br/>#Newlinea browser#Comma even if your desktop computer is offline.<br/>#Newline<br/>#NewlineWhen working offline#Comma it often helps to change the Internet<br/>#Newlinesettings (in IE or Netscape) to "local area network".  <br/>#NewlineThen your machine becomes a one-computer network. You should <br/>#Newlinebe able to use IE to connect to program B with http://localhost:2001.<br/>#Newline<br/>,std-dont.aiml
0,CAN PROBABILITY STATISTICS WEIGHTS NEURAL NETWORKS OR FUZZY LOGIC IMPROVE BOTS,*,*,<br/>#NewlineStatistics are in fact heavily used in the ALICE server#Comma but not in the way<br/>#Newlineyou might think.  ALICE uses 'Zipf Analysis' to plot the rank-frequency of<br/>#Newlinethe activated categories and to reveal inputs from the log file that don't<br/>#Newlinealready have specific replies#Comma so the botmaster can focus on answering<br/>#Newlinequestions people actually ask (the "Quick Targets" function).<br/>#Newline<br/>#NewlineOther bot languages#Comma notably the one used for Julia#Comma make heavy use of<br/>#Newline"fuzzy" or "weighted" rules.  We see their problem as this: the botmaster<br/>#Newlinealready has enough to worry about without having to make up "magic<br/>#Newlinenumbers" for every rule.  Once you get up 10#Comma000 categories (like ALICE)<br/>#Newlineyou don't want to think about more parameters than necessary.  Bot<br/>#Newlinelanguages with fuzzy matching rules tend to have scaling problems.<br/>#Newline<br/>#NewlineFinally#Comma the bot replies are not as deterministic as you might think#Comma even<br/>#Newlinewithout weights.  Some answers rely on &lt;random&gt; to select one of several<br/>#Newlinepossible replies.  Other replies generated by unforseen user input also<br/>#Newlinecreate "spontaneous" outputs that the botmaster doesn't anticipate.<br/>#Newline<br/>,std-dont.aiml
0,CAN THE APPLET RECORD A DIALOG TXT FILE ON THE SERVER,*,*,<br/>#NewlineNo because the applet cannot write the file directly on the originating host.<br/>#NewlineIf your server log file /var/log/httpd/access_log is too large; you <br/>#Newlinehave a couple of choices:<br/>#Newline1. If your ISP is a unix account#Comma use telnet to log on to a shell account.<br/>#NewlineUse the command "grep Blog &lt; access_log &gt; dialog.txt" to create a smaller<br/>#Newlinefile to download which contains just the lines recorded by the applet.<br/>#Newline2. Create a CGI-BIN command called "/cgi-bin/Blog" that reads its<br/>#Newlinecommand-line argument and appends it to a file called "dialog.txt".<br/>#NewlineThere ought to be a nice Perl script for this#Comma or even a shell script.<br/>#Newline<br/>,std-dont.aiml
0,CAN THE APPLETHOST USE A SYMBOLIC DNS NAME INSTEAD OF AN IP NUMBER,*,*,<br/>#NewlineThe answer is yes#Comma but the numeric IP address works on more machines<br/>#Newlinethan a symbolic name.  Applets are protected by a "security sandbox"<br/>#Newlinefrom interfering with local resources on your machine.  One restriction<br/>#Newlineis that Applets may only open socket connections to the originating<br/>#Newlinehost.  When using a symbolic DNS name#Comma the "sandbox" may not know that <br/>#Newlinetwo variations such as "Www.AliceBot.Org" and "alicebot.org" are<br/>#Newlinein fact the same server.  The client might not be able to resolve <br/>#Newlinethe DNS name#Comma and the Applet will throw a security exception.<br/>#Newline<br/>,std-dont.aiml
0,CAN THE VIRTUAL IP BE THE REAL IP,*,*,<br/>#NewlineActually that would be the default case#Comma when the client chats from<br/>#Newlinethe same fixed IP address.  The only time the virtual ip differs from<br/>#Newlinethe real one is when the client is behind a dynamic firewall#Comma like<br/>#NewlineWebTV or AOL customers.<br/>#Newline<br/>,std-dont.aiml
0,CAN YOU GIVE ME A QUICK PRIMER ON AIML,*,*,<br/>#NewlineGiven only the &lt;pattern&gt; and &lt;template&gt; tags#Comma there are three<br/>#Newlinegeneral types of categories: (a) atomic#Comma (b) default#Comma and (c) recursive.<br/>#NewlineStrictly speaking#Comma the three types overlap#Comma because "atomic"<br/>#Newlineand "default" refer to the &lt;pattern&gt; and "recursive" refers to<br/>#Newlinea property of the &lt;template&gt;.<br/>#Newline<br/>#Newlinea). "Atomic" categories are those with atomic patterns#Comma i.e. the pattern<br/>#Newlinecontains no wild card "*" or "_" symbol.  Atomic categories are the<br/>#Newlineeasiest#Comma simplest categories to add in AIML.  <br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline  &lt;pattern&gt;WHAT IS A CIRCLE&lt;/pattern&gt;<br/>#Newline  &lt;template&gt;&lt;set_it&gt;A cicle&lt;/set_it&gt; is a the set of points equidistant <br/>#Newlinefrom a common point called the center.<br/>#Newline  &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newlineb). The name "default category" derives from the fact that its pattern<br/>#Newlinehas a wildcard "*" or "_".  The ultimate default category is the<br/>#Newlineone with &lt;pattern&gt;*&lt;/pattern&gt;#Comma which matches any input.  In the<br/>#NewlineALICE distribution the ultimate default category resides in a file<br/>#Newlinecalled "Pickup.aiml".  These default responses are often called<br/>#Newline"pickup lines" because they generally consist of leading questions<br/>#Newlinedesigned to focus the client on known topics.<br/>#Newline<br/>#NewlineThe more common default categories have patterns combining a few <br/>#Newlinewords and a wild card.  For example the category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline  &lt;pattern&gt;I NEED HELP *&lt;/pattern&gt;<br/>#Newline  &lt;template&gt;Can you ask for help in the form of a question?&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newlineresponds to a variety of inputs from "I need help debugging my program"<br/>#Newlineto "I need help with my marriage."  Putting aside the philosophical<br/>#Newlinequestion of whether the robot really "understands" these inputs#Comma <br/>#Newlinethis category elucidates a coherent response from the client#Comma <br/>#Newlinewho at least has the impression of the robot understanding the<br/>#Newlineclient's intention.  <br/>#Newline<br/>#NewlineDefault categories show that writing AIML is both an art and a<br/>#Newlinescience.  Writing good AIML responses is more like writing good <br/>#Newlineliterature#Comma perhaps drama#Comma than like writing computer programs.<br/>#Newline<br/>#Newlinec). "Recursive" categories are those that "map" inputs to other<br/>#Newlineinputs#Comma either to simplify the language or to identify synonymous<br/>#Newlinepatterns.  <br/>#Newline<br/>#NewlineMany synonymous inputs have the same response.  This is accomplished<br/>#Newlinewith the recursive &lt;srai&gt; tag.  Take for example the input "GOODBYE".<br/>#NewlineThis input has dozens of synonyms: "BYE"#Comma "BYE BYE#Comma "CYA"#Comma "GOOD BYE"#Comma<br/>#Newlineand so on.  To map these inputs to the same output for GOODBYE we <br/>#Newlineuse categories like:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline  &lt;pattern&gt;BYE BYE&lt;/pattern&gt;<br/>#Newline  &lt;template&gt;&lt;srai&gt;GOODBYE&lt;/srai&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineSimplification or reduction of complex input patterns is another<br/>#Newlinecommon application for recursive categories.  In English the<br/>#Newlinequestion "What is X" could be asked many different ways: <br/>#Newline"Do you know what X is?"#Comma "Tell me about X"#Comma "Describe X"#Comma<br/>#Newline"What can you tell me about X?"#Comma and "X is what?" are just a few<br/>#Newlineexamples.  Usually we try to store knowledge in the most concise#Comma<br/>#Newlineor common form.  The &lt;srai&gt; function maps all these forms to<br/>#Newlinethe base form:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline  &lt;pattern&gt;DO YOU KNOW WHAT * IS&lt;/pattern&gt;<br/>#Newline  &lt;template&gt;&lt;srai&gt;WHAT IS &lt;star/&gt;&lt;/srai&gt;&lt;/template&gt;<br/>#Newline&lt;/categroy&gt;<br/>#Newline<br/>#NewlineThe &lt;star/&gt; tag substitutes the value matched by "*"#Comma before<br/>#Newlinethe recursive call to &lt;srai&gt;.  This category transforms<br/>#Newline"Do you know what a circle is?" to "WHAT IS A CIRCLE"#Comma<br/>#Newlineand then finds the best match for the transformed input.<br/>#Newline<br/>#NewlineAnother fairly common application of recursive categories is<br/>#Newlinewhat might be called "parsing"#Comma except that AIML doesn't really<br/>#Newlineparse natural language.  A better term might be "partitioning" because<br/>#Newlinethese AIML categories break down an input into two (or more) parts#Comma<br/>#Newlineand then combine their responses back together.<br/>#Newline<br/>#NewlineIf a sentence begins with "Hello..." it doesn't matter what comes<br/>#Newlineafter the first word#Comma in the sense that the robot can respond to<br/>#Newline"Hello" and whatever is after "..." independently.  "Hello my name<br/>#Newlineis Carl" and "Hello how are you" are quite different#Comma but they show<br/>#Newlinehow the input can be broken into two parts. <br/>#Newline<br/>#NewlineThe category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline  &lt;pattern&gt;HELLO *&lt;/pattern&gt;<br/>#Newline  &lt;template&gt;&lt;srai&gt;HELLO&lt;/srai&gt; &lt;sr/&gt;<br/>#Newline  &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newlineaccomplishes the input partitioning by responding to "HELLO"<br/>#Newlinewith &lt;srai&gt;HELLO&lt;/srai&gt; and to whatever matches "*" with &lt;sr/&gt;.<br/>#NewlineThe response is the result of the two partial responses <br/>#Newlineappended together.<br/>#Newline <br/>,std-dont.aiml
0,CAN YOU GIVE ME ANY HELP DEBUGGING THE APPLET,*,*,<br/>#NewlineDebugging applets can be tricky. The same suggestion<br/>#Newlineto set IE for "local area  network"  might help here too. <br/>#NewlineAlso the browser caches class files#Comma so it's difficult to<br/>#Newlineknow if  you are testing a "fresh" copy of the applet. The<br/>#Newlineprogram "appletviewer" that  comes with Sun Java is better <br/>#Newlinefor debugging applets. Use "appletviewer index.html".<br/>#Newline<br/>#NewlineThe best thing to do is join the alicebot mailing list<br/>#Newlineat alicebot.listbot.com.<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,CAN YOU HELP ME DEBUG THE ANIMATED AGENT,*,*,<br/>#NewlineLook at the class Animagent.java.  The method vbscript_html(reply)<br/>#Newlinedoes nothing unless the global Animagent member is true.  In that case#Comma<br/>#Newlinethe vbscript_html() method constructs a string from the reply that<br/>#Newlineincludes an MS Agent VBScript embedded in the HTML reply.<br/>#NewlineThis makes the browser load up the objects required for the agent.  <br/>#Newline<br/>#NewlineThe text reply just becomes part of the VBScript.  <br/>#NewlineYou may have to download and run the Robby the Robot<br/>#Newlineagent software and the text-to-speech synthesis software from <br/>#Newlinethe MSDN homepage:<br/>#Newline<br/>#Newlinehttp://msdn.microsoft.com/workshop/imedia/agent<br/>#Newline<br/>#NewlineWe wish other companies were producing agent animation API's <br/>#Newlinefor free but this MS Agent seems to be about the only <br/>#Newlinething out there now. <br/>#Newline<br/>#NewlineJoin the ALICE and AIML mailing list at alicebot.listbot.com<br/>#Newlineto see how others are working with the animated agent software.<br/>#Newline<br/>,std-dont.aiml
0,COULD YOU EXPLAIN THE LT SRAI GT TAG A LITTLE MORE,*,*,<br/>#NewlineThe most common application of &lt;srai&gt; is "symbolic reduction"<br/>#Newlineof a complex sentence form to a simpler one:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;DO YOU KNOW WHAT * IS&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;srai&gt;WHAT IS &lt;star/&gt;&lt;/srai&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newlineso the botmaster can store most knowledge in the simplest<br/>#Newlinecategories:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHAT IS LINUX&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;set_it&gt;Linux&lt;/set_it&gt; is the best operating system.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineWith all the "symbolic reduction" categories#Comma  the robot gives<br/>#Newlinethe same answer for:<br/>#Newline<br/>#Newline"What is Linux?"<br/>#Newline"Do you know what Linux is?"<br/>#Newline"Define Linux"<br/>#Newline"Alice please tell me what Linux is right now"<br/>#Newline<br/>#NewlineSometimes the response consists of two symbolic reductions together:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;YES *&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;srai&gt;YES&lt;/srai&gt; &lt;sr/&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineWith this category the robot will reply to all <br/>#Newline"Yes something" inputs by combining the<br/>#Newlinereply to "Yes" with the reply to "something".<br/>#NewlineRemember#Comma &lt;sr/&gt; is an abbreviation for &lt;srai&gt;&lt;star/&gt;&lt;/srai&gt;. <br/>#Newline<br/>#NewlineThe &lt;srai&gt; tag is also the answer to the question: Can I have more<br/>#Newlinethan one pattern in the same category?  Suppose you want the<br/>#Newlinesame answer for two different patterns.  You might think of<br/>#Newlinewriting something like this:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;BYE&lt;/pattern&gt;<br/>#Newline&lt;pattern&gt;GOODBYE&lt;/pattern&gt;<br/>#Newline&lt;template&gt;See you later.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineRight now you can't put two patterns in one category#Comma but with &lt;srai&gt;<br/>#Newlineyou can get the same effect:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;GOODBYE&lt;/pattern&gt; &lt;template&gt;&lt;srai&gt;BYE&lt;/srai&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;BYE&lt;/pattern&gt; &lt;template&gt;See you later.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineIf you look through the AIML files you will see many examples<br/>#Newlineof &lt;srai&gt; mapping multiple patterns to the same reply.<br/>#Newline<br/>,std-dont.aiml
0,DO I HAVE TO USE THE GUI TO ENTER AIML CONTENT,*,*,<br/>#NewlineNo. You can create a new AIML file with any text editor<br/>#Newlineand add that content to an existing robot with the &lt;load&gt; tag.<br/>#Newline<br/>#NewlineAlso#Comma you can edit AIML categories in any text file and use <br/>#Newline"Load Text File" and "Add Aiml" to add the content.  <br/>#NewlineYou can also save the output of "Targets" to a file#Comma <br/>#Newlineedit that file#Comma and then reload and "Add Aiml". <br/>#Newline<br/>#NewlineFinally#Comma you can edit the robot source file files directly. <br/>#Newline(By default the robot source file is called "B.aiml").  <br/>#NewlineUse a text editor#Comma like emacs#Comma notepad#Comma or a word processor<br/>#Newlinein text mode#Comma to modify the content of the AIML files.<br/>#Newline<br/>,std-dont.aiml
0,DO I NEED TO KNOW ABOUT THE JAVA CLASSES,*,*,<br/>#NewlineNo#Comma not unless you plan to do software development on<br/>#Newlinethe program B Java code.  If you are an open source<br/>#Newlinecontributor to the ALICE project#Comma a researcher developing<br/>#Newlinenew AI software#Comma or you are trying to link your own<br/>#Newlinecode to the ALICE package#Comma then this section is for you.<br/>#NewlineOtherwise#Comma you probably don't need to know much about the<br/>#NewlineJava classes in program B.<br/>#Newline<br/>,std-dont.aiml
0,DO THE CATEGORIES NEED TO BE IN ALPHABETICAL ORDER BY PATTERN,*,*,<br/>#NewlineNo#Comma the alphabetical order is maintained internally when the<br/>#Newlinecategories load#Comma but you can write them in any order.  When you do<br/>#Newline"Save Robot" the file may or may not be stored alphabetically.<br/>#Newline<br/>,std-dont.aiml
0,DOES PROGRAM B RUN ON A MAC,*,*,<br/>#NewlineYes.  Download the B.zip file and save it in a new folder#Comma called<br/>#Newlinefor example "Alice Program-B".<br/>#Newline<br/>#NewlineInstead of the "winzip" or "unzip" utility use "Aladdin StuffIt Expander."  <br/>#NewlineThe newer version will unzip most MAC formats as well as .ZIP files.  You can<br/>#Newlinedownload this at "www.download.com" by searching for it by name.  You can<br/>#Newlinealso select the option that allows it to search only for Mac programs.<br/>#NewlineDownload that and install it#Comma it should do the trick.<br/>#Newline<br/>#NewlineApple makes its own Java Runtime Environment for the Mac called<br/>#NewlineMRJ 2.2.  You can download it from http://www.apple.com/java.<br/>#Newline<br/>#NewlineTo compile the Java code for Alice on a Mac:<br/>#Newline<br/>#NewlineDownload the current zip file for the Alice's Program-B from the Alice site.<br/>#Newline<br/>#NewlineUnzip Program-B and keep it in a folder called "B" on your startup drive and<br/>#Newlinenot on the desktop.<br/>#Newline<br/>#NewlineDownload  MRJ SDK 2.2 for Java  from  the Apple site.<br/>#Newline<br/>#NewlineUnstuff MRJ SDK 2.2 and put resulting files into a folder called "MRJSDK".<br/>#Newline<br/>#NewlineOpen :MRJSDK:Tools:Application Builders:JBindary  and find the icon for the<br/>#NewlineJBindary application.<br/>#Newline<br/>#NewlineOpen the folder "B" and drag the icon "B.class" out of the folder onto the<br/>#NewlineJBindary icon.<br/>#Newline<br/>#NewlineJBindary will display a dialog screen showing the class name "B".  Click the<br/>#Newline"Save Settings" button.<br/>#Newline<br/>#NewlineAfter clicking the "Save Settings" button#Comma JBindary will display a dialog box<br/>#Newlinefor saving the new application file.  Name the file "A.L.I.C.E." or anything<br/>#Newlineyou wish.<br/>#Newline<br/>#NewlineBe sure the "Save As Application" box is checked and the folder to save in is<br/>#Newlinethe "B" folder.<br/>#Newline<br/>#NewlineClick the "Save" button to save the application.<br/>#Newline<br/>,std-dont.aiml
0,DOES PROGRAM B RUN UNDER LINUX,*,*,<br/>#NewlineYes.  You need the JRE#Comma which often comes bundled with Linux<br/>#Newline(e.g. the kaffee JRE with Red Hat Linux) or you can download one <br/>#Newlinefrom java.sun.com.  You also need X-windows to run the GUI.  <br/>#NewlineOpen a shell under X windows and use the command "java B".  <br/>#Newline<br/>#NewlineWe also recommend the IBM release of their Java 1.1.8 Java Development<br/>#NewlineKit (JDK) and JRE for Linux. It is solid#Comma efficient and very fast.  <br/>#NewlineYou can download it free at:<br/>#Newlinehttp://www.ibm.com/java/jdk/118/linux/index.html<br/>#Newline<br/>,std-dont.aiml
0,DOES PROGRAM B RUN UNDER WINDOWS,*,*,<br/>#NewlineYes.  You need the Java Runtime Environment (JRE) so you can run the<br/>#Newline"java" command from the DOS prompt.  Try opening a DOS window<br/>#Newlineand type "java".  <br/>#Newline<br/>#NewlineMicrosoft often includes a JRE called "jview" rather than<br/>#Newline"java".  Try opening a DOS window and type "jview".  On Windows 98<br/>#Newlinethe JRE is usually located in c:\windows\jview.exe.<br/>#Newline<br/>,std-dont.aiml
0,DOES PROGRAM B RUN UNDER XYZ,*,*,<br/>#NewlineYes if XYZ runs has a Java Runtime Environment 1.17 or higher.<br/>#Newline<br/>,std-dont.aiml
0,DOES PROGRAM B SERVE HTML FILES,*,*,<br/>#NewlineYes.  Program B is a "faux" web server that can serve a number of file<br/>#Newlinetypes just like an ordinary server.  Certain file names such as<br/>#Newline"HOME.html"#Comma "header.html"#Comma and "trailer.html" are reserved by<br/>#Newlineprogram B#Comma but you can create new HTML files and serve them with B.<br/>#Newline<br/>#NewlineAlthough program B can also serve image files and other large binary<br/>#Newlinefiles#Comma we recommend creating chat robot web pages with links to images<br/>#Newlineserved by other web servers or machines.  Reserve your chat robot server<br/>#Newlinefor the robot chat#Comma use ordinary web servers for images and other large<br/>#Newlinefiles.<br/>#Newline<br/>,std-dont.aiml
0,DOES THE APPLET RECORD DIALOGUES,*,*,<br/>#NewlineThe applet tries to log conversations on the originating server#Comma<br/>#Newlineusing a cgi-bin script called "Blog".  If Blog exists then<br/>#Newlineit records the dialogues in a file called "dialog.txt" (or<br/>#Newlineanother name chosen on the Options menu).  <br/>#Newline<br/>#NewlineActually the cgi-script need not actually exist#Comma because the server<br/>#Newlinerecords the cgi-commands as errors in the access log.<br/>#NewlineThe applet opens a URL connection to the its host#Comma and<br/>#Newlinesends a log string that looks like an HTTP request#Comma but the HTTP<br/>#Newlineserver will log it as an error (with code 404). Later on you can<br/>#Newlinedownload the access_log and analyze it with program B.<br/>#Newline<br/>#NewlineSee the code in Classifier.java for the method log(x) that<br/>#Newlineimplements the URL connection.<br/>#Newline<br/>,std-dont.aiml
0,HOW ARE THE CATEGORIES STORED,*,*,<br/>#NewlineIf your session with program B included a "Classify" routine#Comma then<br/>#Newlinethe AIML script is stored in order of category activation rank.<br/>#NewlineIn other words#Comma program B stores<br/>#Newlinethe most frequently accessed category (usually '*') first#Comma the second<br/>#Newlinemost frequently next#Comma and so on.  If a number of categories have the<br/>#Newlinesame activation count#Comma program B saves them in alphabetical order by<br/>#Newlinepattern.  Hence#Comma if the session did not include a "classify" routine#Comma<br/>#Newlinethe program stores all the categories in alphabetical order by pattern<br/>#Newline(because they all have an activation count of zero).<br/>#Newline<br/>#NewlineOne reason to store the categories in order by activation is to<br/>#Newlinemake the Applet interface more natural.  Because the Applet interface<br/>#Newlinestarts simultaneously with a thread to load the robot source file#Comma<br/>#Newlinethe Applet client can talk with the robot before all the categories<br/>#Newlineare fully loaded.  Given that the interlocutor is more likely to<br/>#Newlinesay something that activates a more frequently activated category#Comma<br/>#Newlineit makes sense to transmit these categories first.  Storing the<br/>#Newline*.aiml files in order of category activation achieves the desired effect.<br/>#NewlineThe Applet loads the most frequent categories first#Comma and continues<br/>#Newlineloading in the background while the conversation begins.<br/>#Newline<br/>,std-dont.aiml
0,HOW ARE THE PATTERNS MATCHED,*,*,<br/>#NewlineProgram B stores the categories in alphabetical order by pattern.<br/>#NewlineWhen a client enters an input#Comma the program scans the categories<br/>#Newlinein reverse order to find the best match.   By comparing the<br/>#Newlineinput with the patterns in reverse alphabetical order#Comma the algorithm<br/>#Newlineensures that the most specific pattern matches first.  "Specific"<br/>#Newlinein this case has a formal definition#Comma but basically it means that<br/>#Newlinethe program finds the "longest" pattern matching an input.<br/>#Newline<br/>#NewlineThe wild-card character "*" comes before "A" in alphabetical <br/>#Newlineorder.  For example#Comma the "WHAT *" pattern is more general than "WHAT IS *".<br/>#NewlineThe default pattern "*" is first in alphabetical order and the<br/>#Newlinemost general pattern.  For convenience AIML also provides a<br/>#Newlinevariation on "*" denoted "_"#Comma which comes after "Z" in alphabetical<br/>#Newlineorder.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I CREATE A NEW ROBOT PERSONALITY,*,*,<br/>#NewlineThere is a lot of flexibility in robot personality design with AIML.  <br/>#NewlineYou can add to any of the existing AIML files#Comma modify or delete them#Comma <br/>#Newlinecreate your own#Comma or use the GUI tools to analyze the log files <br/>#Newlineand create new categories.   One simple method is to create your own <br/>#NewlineSpecialty.aiml file so that you can always get the latest copies <br/>#Newlineof the ALICE files.  Load your Specialty.aiml first in the root<br/>#NewlineAIML file (usually B.aiml) so that its categories have priority over ALICE's.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I CREATE MY OWN CHAT ROBOT,*,*,<br/>#NewlineThe secret to chat bot programming#Comma if there is one#Comma is what Simon<br/>#NewlineLaven called "continuous beta testing".  Program B runs as a server<br/>#Newlineand collects dialog on the web.  The program provides the chat bot <br/>#Newlinedeveloper with a tool called "classify dialogues"#Comma that tests the current <br/>#Newlinerobot with the history of accumulated human queries.  Moreover#Comma the program<br/>#Newlinesuggests new categories automatically#Comma for the botmaster to refine.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I CUSTOMIZE MY ROBOT,*,*,<br/>#NewlineAIML provides several tags useful to quickly clone<br/>#Newlinea chat robot from ALICE with a distinct "personality":<br/>#Newline<br/>#Newline&lt;gender/&gt;        the robot's gender<br/>#Newline&lt;location/&gt;      the robot's location<br/>#Newline&lt;birthday/&gt;      the robot's birthday<br/>#Newline&lt;botmaster/&gt;   the botmaster's name<br/>#Newline<br/>#NewlineTogether with the previously discussed &lt;name/&gt;#Comma these<br/>#Newlinetags allow you to quickly create a clone from the ALICE<br/>#NewlineBrain with a separate identity from ALICE.<br/>#Newline<br/>#NewlineAll the personality tag values can be modifed through<br/>#Newlinethe Personality Wizard.  The tag values can also be<br/>#Newlinechanged with the Options Menu in program B. Use "Show Options" <br/>#Newlineand "Save Options" to customize your chat robot.<br/>#Newline<br/>#NewlineTo test the new features#Comma we created a male robot named<br/>#NewlineBrute (because "all men are brutes") born on August 18#Comma 1999.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I GET A PERMANENT DNS NAME,*,*,<br/>#NewlineYou can buy a fixed IP address from an ISP provider#Comma but suppose<br/>#Newlineyou want run a chat robot (or other server) from your home over an<br/>#Newlineordinary ISP connection?  Or suppose you want to carry it around on<br/>#Newlineyour notebook PC#Comma and plug it in anywhere in the world?<br/>#Newline<br/>#NewlineOne solution is a dynamic IP registry service by Dynip (www.dynip.com).<br/>#NewlineThey offer a service that allows you to register your computer<br/>#Newlinewith their server so that you always receive the same DNS name#Comma<br/>#Newlinefor example alicebot.dynip.com.   Every time you connect to your<br/>#NewlineISP#Comma dynIP automatically associates your dynamic IP address with<br/>#Newlineyour permanent DNS name.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I INSERT A TRANSCRIPT IN THE ROBOT REPLY,*,*,<br/>#NewlineThe purpose of &lt;get_dialogue/&gt; is to give the client a transcript of<br/>#Newlinehis or her conversation with ALICE.  Unfortunately this feature was<br/>#Newlineadvertised in a press article before we had a really efficient<br/>#Newlineimplementation#Comma and the large number of dialogue requests bogged<br/>#Newlinedown the server.  So for now &lt;get_dialogue/&gt; just displays a warning.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I KEEP MY COMPUTER CONNECTED ALL THE TIME,*,*,<br/>#NewlineRunning a web server from home can be frustrating if your ISP<br/>#Newlineautomatically detects periods of "inactivity" or hangs up your<br/>#Newlineconnected after a fixed interval like 12 hours.  Check out the<br/>#NewlineRascal program from Basta computing (www.basta.com) which runs<br/>#Newlineas a watchdog to keep your Windows machine connected 24/7.<br/>#Newline<br/>#NewlineAnother alternative is to use the program B applet#Comma called Blet.java.<br/>#Newline<br/>#NewlineA third alternative is the ALICE Servlet.  Some ISPs will<br/>#Newlineallow you to install a Servlet on their sever. <br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I MERGE TWO CHAT ROBOTS TOGETHER,*,*,<br/>#NewlineThere are two ways to merge robots together.  First#Comma you can<br/>#Newlineuse the File menu option "merge" to directly load the contents<br/>#Newlineof another bot file.  You may see a lot of "duplicate key<br/>#Newlinediscarded" warnings but these can be ignored because the program<br/>#Newlineis simply eliminating overlapping content.  <br/>#Newline<br/>#NewlineAnother method is to use  the &lt;load filename=X/&gt; tag.  <br/>#NewlineSuppose you load two or more files with the load tag#Comma<br/>#Newlineand those files contain redundant duplicate keys.<br/>#NewlineWhich categories get the priority? The answer is: it depends<br/>#Newlineon the order of the &lt;load&gt; tags used to load the AIML files.<br/>#NewlineIf your B.aiml contains:<br/>#Newline&lt;load filename="Brain.aiml"/&gt;<br/>#Newline&lt;load filename="German.aiml"/&gt;<br/>#Newlinethen the categories from "Brain" have priority#Comma and duplicates<br/>#Newlinein "German" are discarded.  If the order is the opposite#Comma German <br/>#Newlinecategories have priority and Brain's duplicates are discarded.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I RESTRICT REMOTE CLIENTS FROM RUNNING PROGRAMS ON MY COMPUTER,*,*,<br/>#NewlineIf your reply contains the markup<br/>#Newline<br/>#Newline&lt;system&gt;yourcammand &lt;get_ip/&gt;&lt;/system&gt; <br/>#Newline<br/>#Newlinethen the robot will insert the (virtual) client IP into the command<br/>#Newlineline argument for "yourcommand".  Then it is up to "yourcommand" to<br/>#Newlineenforce access privileges.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I RUN ALICE ON A MAC OFFLINE,*,*,<br/>#NewlineFirst open folder B and change all the IP's in the files two files Blet.amil<br/>#Newlineand Bletemplate.aiml to 127.0.0.1<br/>#Newline<br/>#NewlineAlso in folder B add the following three lines  at the end of the file<br/>#Newlineheader.html.<br/>#Newline<br/>#Newline     &lt;H1&gt;Welcome to A. L. I. C. E.&lt;/H1&gt;<br/>#Newline     &lt;IMG SRC="ALICEBot.jpg"&gt;<br/>#Newline     &lt;BR&gt;<br/>#Newline<br/>#NewlineAlso in folder B change the following three parameters in the file<br/>#Newlineglobals.txt to the values shown:<br/>#Newline<br/>#Newline     AppletHost=127.0.0.1<br/>#Newline     CodeBase=http://127.0.0.1/B<br/>#Newline     Advertize=false<br/>#Newline<br/>#NewlineAlso in the globals.txt file remove the line:<br/>#NewlineACFURL=http-//microsoft.com/agent2/chars/robby/robby.acf<br/>#Newline<br/>#NewlineNext open your TCP/IP control panel and set up a new configuration named<br/>#NewlineAlice perhaps.<br/>#Newline<br/>#NewlineIn the TCP/IP control panel select connect via: Ethernet built-in if you have<br/>#Newlineit if not you may have to experiment.<br/>#Newline<br/>#NewlineThen select Configure Manually.<br/>#Newline<br/>#NewlineAnd finally set the IP Address: to 127.0.0.1 as well as the Name server addr.<br/>#Newline<br/>#NewlineDouble click the newly saved A.L.I.C.E. application to bring up the botmaster<br/>#Newlinepanel and Java Console.<br/>#Newline<br/>#NewlineAs A.L.I.C.E. loads#Comma read the information messages scrolling by in the Java<br/>#NewlineConsole and record the port number that the web server (started by  A.L.I.C.E.)<br/>#Newlineis listening on#Comma probably 2001.<br/>#Newline<br/>#NewlineStart up your preferred browser.<br/>#Newline<br/>#NewlineLeave browser in online mode.<br/>#Newline<br/>#NewlineEnter http://127.0.0.1:2001  (i.e. the localhost's IP)<br/>#Newline<br/>#Newlineor<br/>#Newline<br/>#NewlineEnter http://localhost:2001  (I've not always been successful with this one)<br/>#Newline<br/>#NewlineHit return to send the IP.<br/>#Newline<br/>#NewlineThe A.L.I.C.E. transaction page should appear in your browser's window and<br/>#Newlineyou can talk to Alice.<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I RUN THE ALICE WEB SERVER ON A MAC,*,*,<br/>#NewlineTo run Alice online:<br/>#Newline<br/>#NewlineConnect your Mac to a network.<br/>#Newline<br/>#NewlineDouble click the newly saved A.L.I.C.E. application to bring up the botmaster<br/>#Newlinepanel and Java Console.<br/>#Newline<br/>#NewlineAs A.L.I.C.E. loads#Comma read the information messages scrolling by in the Java<br/>#NewlineConsole and record the port number that the web server (started by A.L.I.C.E.)<br/>#Newlineis listening on#Comma probably 2001.<br/>#Newline<br/>#NewlineStart up your preferred browser.<br/>#Newline<br/>#NewlineGet your IP from the TCP/IP control panel.<br/>#Newline<br/>#NewlineEnter your IP followed by a colon and then the port number read from the Java<br/>#NewlineConsole#Comma e.g.    http://nn.nnn.nn.nnn:2001<br/>#Newline<br/>#Newlineor<br/>#Newline<br/>#NewlineEnter http://127.0.0.1:2001  (i.e. the localhost's IP)<br/>#Newline<br/>#Newlineor<br/>#Newline<br/>#NewlineEnter http://localhost:2001<br/>#Newline<br/>#NewlineHit return to send the IP.<br/>#Newline<br/>#NewlineThe A.L.I.C.E. transaction page should appear in your browser's window and<br/>#Newlineyou can talk to Alice.<br/>#Newline<br/>,std-dont.aiml
0,HOW CAN I USE THE MS AGENT INTERFACE,*,*,<br/>#NewlineSelect the menu item Options/Toggle MS Agent.  This sets the<br/>#Newlineoutput HTML to a format that includes commands to run MS Agent.<br/>#Newline<br/>#NewlineThe client may activate the agent if she receives a template<br/>#Newlinewith the &lt;set_animagent/&gt; tag.  The free ALICE download includes<br/>#Newlinea couple of example categories using this tag.  Try asking<br/>#NewlineALICE#Comma "Can you speak?".  In another demo ALICE imitates<br/>#Newlinethe famous fictional AI HAL from 2001: A Space Odyssey.<br/>#Newline<br/>#NewlineClient: Tell me about yourself<br/>#NewlineRobot:  I am an artificial linguistic entity. I was created <br/>#Newline        by Jon Baer at Bethlehem#Comma Pennsylvania#Comma <br/>#Newline        on November 23#Comma 1995.  He taught me to sing a song. <br/>#Newline        Would you like me to sing it for you?.<br/>#NewlineClient: yes<br/>#NewlineRobot:  Ahem.  It's called#Comma "Daisy." (Agent sings "Daisy")<br/>#Newline<br/>#NewlineThe MS Agent VB script appears as embedded HTML in the client<br/>#Newlinereply.  To verify the script#Comma use the browser "View Page Source"<br/>#Newlinemenu item.  <br/>#Newline<br/>#NewlineOn most newer browsers#Comma the agent software will download <br/>#Newlineautomatically after the script starts.  The download may take<br/>#Newlineseveral minutes#Comma depending on the speed of the connection.<br/>#NewlineClients should be warned that the download is slow.  Also#Comma<br/>#Newlinethe agent software download will display one or more licenses<br/>#Newlinein Dialog boxes.  You may not want to accept the terms of the<br/>#NewlineMS agent software licenses.  <br/>#Newline<br/>,std-dont.aiml
0,HOW DIFFICULT IS IT TO CREATE A CHAT ROBOT,*,*,<br/>#NewlineNot difficult.  If you can write HTML#Comma you can write AIML (Artificial<br/>#NewlineIntelligence Markup Language).  Here is an example of a simple but<br/>#Newlinecomplete chat robot in AIML:<br/>#Newline<br/>#Newline&lt;alice&gt;<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;*&lt;/pattern&gt;<br/>#Newline&lt;template&gt; Hello! &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline&lt;/alice&gt;<br/>#Newline<br/>#NewlineThe tags &lt;alice&gt;...&lt;/alice&gt; indicate that this markup contains a<br/>#Newlinechat robot.  The &lt;category&gt; tag indicates an AIML category#Comma the<br/>#Newlinebasic unit of chat robot knowledge.  The category has a &lt;pattern&gt;<br/>#Newlineand a &lt;template&gt;.  The pattern in this case is the wild-card<br/>#Newlinesymbol '*' that matches any input.  The template is just the text<br/>#Newline"Hello!"   As you may have guessed#Comma this simple chat robot just <br/>#Newlineresponds by saying "Hello!" to any input.<br/>#Newline<br/>#NewlineYou can get started with AIML knowing just the three tags<br/>#Newline&lt;category&gt;#Comma &lt;pattern&gt; and &lt;template&gt;; much like you may have<br/>#Newlinestarted with HTML knowing only &lt;a&gt;#Comma &lt;img&gt; and &lt;h1&gt;.<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I CREATE AN APPLET,*,*,<br/>#NewlineGo to the Options menu and select "Show Options."  You need<br/>#Newlineto change the values of "AppletHost" and "CodeBase" to the<br/>#Newlinecorrect IP address and directory for your applet host. <br/>#NewlineMany people want to post the applet on their web site.<br/>#NewlineIn that case#Comma change the IP address "206.184.206.210" to<br/>#Newlinethe name or IP address of the web server.  Change the<br/>#Newlinedirectory path "/B" in "CodeBase" to your directory on<br/>#Newlinethe remote server.  Save the changes with "Save Options."<br/>#Newline<br/>#NewlineSelect "Create Applet" from the options menu to create<br/>#Newlinethe "index.html" and "Blet.aiml" files needed to run<br/>#Newlineyour applet.  The program displays the contents of <br/>#Newline"index.html" in your text area.<br/>#Newline<br/>#NewlineUse a file transfer utility like FTP to upload the<br/>#Newlineclass files (or jar file--see "What files do I need to<br/>#Newlinerun the Applet") to your web server.  <br/>#Newline<br/>,std-dont.aiml
0,HOW DO I DOWNLOAD PROGRAM B,*,*,<br/>#NewlineCreate a Directory (or Folder) on your machine to download<br/>#Newlinethe B.zip file.  When you click on "B.zip" the browser<br/>#Newlineshould ask you where you want to save the file.  Select the<br/>#Newlinedirectory you created and save B.zip to that folder. <br/>#Newline<br/>#NewlineOnce you've downloaded#Comma You can use "unzip B.zip" to extract the files.<br/>#NewlineIf you don't have this unzip command on your machine#Comma you can get<br/>#Newlinea free one from Winzip (www.winzip.com) to unzip the "B.zip" file.<br/>#Newline<br/>#NewlineIf you want to get into the Java source code#Comma you need a<br/>#NewlineJava 1.17 (or higher) development kit release.<br/>#NewlineGo to java.sun.com for a free one.  The program source code<br/>#Newlineand all associated files are stored in the single "zip" file<br/>#Newlinecalled B.zip.   To extract the files use the command<br/>#Newline"unzip B.zip" (assuming you have "unzip" on your machine).<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I INSTALL ALICE,*,*,<br/>#NewlineIf you purchased a commercial version of ALICE on CD ROM or<br/>#Newlineover the web#Comma installation should be very easy.  These versions <br/>#Newlineusually have their own self-extracting and install software.  <br/>#NewlineYou can install the ALICE program with just a mouse click and<br/>#Newlineactivate it with a desktop icon.  <br/>#Newline<br/>#NewlineIf you bought a commercial version of ALICE with a self-installer#Comma <br/>#Newlineyou can skip this section and go on to "Creating Content".<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I INSTALL ALICE ON WINDOWS,*,*,<br/>#NewlineDownload Alicebot.Net at www.alicebot.net.<br/>,std-dont.aiml
0,HOW DO I KNOW WHAT CATEGORIES TO ADD,*,*,<br/>#NewlineAfter you collect some dialogue#Comma run "Classify" and "Quick Targets".<br/>#NewlineThis will tell you the most frequently asked patterns that do not<br/>#Newlinealready have specific responses.  The "Target" functions display new<br/>#Newlinecategories with proposed patterns and template fields filled with<br/>#Newlinethe name of another category.  Delete the template information and fill<br/>#Newlinein a new response.  You can also edit the pattern to simplify it or<br/>#Newlinegeneralize it with a "*" operator.<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I RUN PROGRAM B,*,*,<br/>#NewlineUse the command "java B" to start the program.  On some Windows<br/>#Newlinemachines the Java runtime engine is started with the command<br/>#Newline"jview" instead of "java".  If "jview B" does not work#Comma try<br/>#Newline"jview Bawt".<br/>#Newline<br/>#NewlineRun program B and notice that the program creates an Edit View<br/>#Newlinetext window.  By default#Comma program B loads the chat robot ALICE<br/>#Newline(stored in B.aiml).<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I UNINSTALL ALICE FROM MY SYSTEM,*,*,<br/>#NewlineIf you installed ALICE on Windows with a commercial installer like<br/>#NewlineInstallShield Java Edition#Comma then go to the start menu and<br/>#Newlineselect "Control Panel".  Click on the control panel item called<br/>#Newline"Add/Remove Programs".  Select ALICE from the list of installed<br/>#Newlinesoftware and choose "Uninstall".<br/>#Newline<br/>#NewlineAll the files of ALICE are stored in one directory on your computer<br/>#Newline(or folder) usually called "B" but maybe something else depending<br/>#Newlineon the name you chose when you downloaded ALICE.  In any case#Comma <br/>#NewlineALICE will not change or damage any other files on your system.  <br/>#NewlineTo remove ALICE from your computer#Comma simply remove this folder.  <br/>#NewlineDelete it#Comma or drag it to your trash bin and select "Empty trash"<br/>#Newline(or "Empty Recycle Bin").<br/>#Newline<br/>#NewlineIf you cannot find the folder where ALICE resides#Comma use the Finder<br/>#Newlineto locate the file called "B.aiml" on your file system.  The "B.aiml"<br/>#Newlinefile is in the same directory as all the ALICE files.  If this file does<br/>#Newlinenot exist#Comma then ALICE is probably not installed on your computer.<br/>#Newline<br/>#NewlineBecause ALICE is a platform-independent Java application#Comma it does<br/>#Newlinenot rely on the Windows Registry or other Windows-specific features.<br/>#NewlineYou can assume ALICE will leave your MS Windows Registry and <br/>#Newlineother Windows system files untouched.<br/>#Newline<br/>#NewlineConceivably if ALICE has run for a long time on your computer#Comma and<br/>#Newlineyou deliberately used the "Save Options" menu item to change the <br/>#Newlinename or location of her files to something other than the default values#Comma <br/>#Newlinethen there is a slight chance that there could be a few ALICE <br/>#Newlinefiles scattered around your disk.  Please refer to the DISCLAIMER <br/>#Newlineat the beginning of DON'T READ ME.  <br/>#Newline<br/>,std-dont.aiml
0,HOW DO I USE THAT,*,*,<br/>#NewlineThe AIML tag &lt;that&gt; refers to the robot's previous<br/>#Newlinereply.  There are two forms of the &lt;that&gt; tag:<br/>#Newlinea paired form &lt;that&gt;...&lt;/that&gt; appearing in a<br/>#Newlinecategory#Comma and an atomic form &lt;that/&gt; always appearing<br/>#Newlinein a template.  Often we can use &lt;that/&gt; to find<br/>#Newlinean opportunity to create a category with &lt;that&gt;&lt;/that&gt;.<br/>#Newline<br/>#NewlineOne of the default replies to the input "WHY" is<br/>#Newline"&lt;that/&gt;"?  Why?  This default produces the following<br/>#Newlinedialogue fragment:<br/>#Newline<br/>#NewlineRobot: Do not ask me any more questions please.<br/>#NewlineClient: WHY<br/>#NewlineRobot: "Do not ask me any more questions please"? Why?<br/>#Newline<br/>#NewlineThe botmaster notices the fragment and creates the<br/>#Newlinenew AIML category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHY&lt;/pattern&gt;<br/>#Newline&lt;that&gt;DO NOT ASK ME ANY MORE QUESTIONS PLEASE&lt;/that&gt;<br/>#Newline&lt;template&gt;Because I would rather talk about you.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineNow the next client who asks "WHY" to the robot's<br/>#Newlinerequest will active the new &lt;that&gt; category:<br/>#Newline<br/>#NewlineRobot: Do not ask me any more questions please.<br/>#NewlineClient: WHY<br/>#NewlineRobot: Because I would rather talk about you.<br/>#Newline<br/>#NewlineThis style of conversational analysis does not<br/>#Newlinepresuppose that we know when the client will<br/>#Newlinesay "WHY"; rather it looks backward to identify<br/>#Newlinecases where the "WHY" appeared following one<br/>#Newlineof the robot's statements.  Having identified<br/>#Newlinethe conversation point#Comma the botmaster creates<br/>#Newlinethe new category.<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I USE THE LT TOPIC GT TAG,*,*,<br/>#Newline  The concept is that the botmaster uses the &lt;settopic&gt; tags to set <br/>#Newlinethe current topic being discussed.  Once the topic is set#Comma when <br/>#Newlinethe client types in a statement for ALICE to find a response for#Comma <br/>#Newlinethe categories defined within the &lt;topic&gt; tags matching the <br/>#Newlinecurrent topic will be searched first-- before any of the non-<br/>#Newlinetopic categories#Comma or the default categories.  If there is not a <br/>#Newlinematching category defined in the current topic#Comma then any <br/>#Newlinecategories that are not defined in topic tags are searched. As <br/>#Newlinementioned before#Comma you can create categories with identical <br/>#Newline&lt;pattern&gt; phrases in different topics#Comma each with different <br/>#Newlineresponses that cater to the current topic.<br/>#Newline<br/>#NewlineAn proof of concept example:<br/>#NewlineA very useful topic entry might be the default "*" input for <br/>#Newlinespecific topics.  If ALICE were set up on a pet store web site <br/>#Newlineand a person was talking to ALICE about dogs#Comma a useful entry <br/>#Newlinemight be:<br/>#Newline<br/>#Newline&lt;topic name="DOGS"&gt;<br/>#Newline<br/>#Newline &lt;category&gt;<br/>#Newline  &lt;pattern&gt; * &lt;/pattern&gt;<br/>#Newline  &lt;template&gt;<br/>#Newline   &lt;random&gt;<br/>#Newline    &lt;li&gt; Dogs are one of the most popular pets to have.&lt;/li&gt;<br/>#Newline    &lt;li&gt; Have you ever met a Chihuahua you didn't like?&lt;/li&gt;<br/>#Newline    &lt;li&gt; What else do you know about dogs? &lt;/li&gt;<br/>#Newline    &lt;li&gt; Do you have any questions about dogs? &lt;/li&gt;<br/>#Newline   &lt;/random&gt;<br/>#Newline  &lt;/template&gt;<br/>#Newline &lt;/category&gt;<br/>#Newline<br/>#Newline//more dog categories....<br/>#Newline<br/>#Newline&lt;/topic&gt;<br/>#Newline<br/>#NewlineNormally there would be many entries in a topic#Comma but in this <br/>#Newlineexample#Comma we simply entered the default "*".  In this case#Comma if the <br/>#Newlineperson said something that ALICE didn't have a specific <br/>#Newlineprogrammed response for#Comma she could still respond intelligently <br/>#Newlinewithin the current topic. (Note: this is all assuming there are <br/>#Newlineexisting categories that might set the current topic to "DOGS")<br/>#Newline<br/>#NewlineAlso#Comma though topics can only have one name#Comma they can contain the <br/>#Newlinewild characters "*" or "_" just like a pattern. Also#Comma while <br/>#Newlinesticking with the pattern criteria#Comma only one wildcard character <br/>#Newlineis allowed per name.  This would allow topics like "CARING FOR <br/>#NewlineDOGS" or "GROOMING DOGS" to also fall into the "_ DOGS" topic.  <br/>#NewlineAs with patterns#Comma the more specific topics would gain preference <br/>#Newlineover the wildcarded topic.  This means that if the topic is <br/>#Newlinecurrently "GROOMING DOGS" and yet there is not a programmed <br/>#Newlineresponse for the input in that category#Comma then "_ DOGS" would be <br/>#Newlinechecked#Comma and then next the default categories.<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,HOW DO I USE THE PRONOUN TAGS,*,*,<br/>#NewlineThe guiding principle in creating content is dialogue analysis.<br/>#NewlineThe principle applies to pronouns like "it"#Comma "he" and "we".  This<br/>#Newlineexample shows how a couple of tricks helps us find places where<br/>#Newlinethe pronoun tags improve the dialogue.<br/>#Newline<br/>#Newline<br/>#NewlineClient: HELLO<br/>#NewlineRobot: Hi there!<br/>#NewlineClient: HOW ARE YOU<br/>#NewlineRobot: I am functioning within normal parameters.<br/>#NewlineClient: I AM BROKE<br/>#NewlineRobot: Do you mean your name is broke.<br/>#NewlineClient: NO I HAVE NO MONEY<br/>#NewlineRobot: I see. Would you like to have it?<br/>#NewlineClient: YES<br/>#NewlineRobot: "Would you like to have it"? Yes?<br/>#Newline<br/>#NewlineOne of the default responses to a YES pattern is <br/>#Newline"&lt;that/&gt;?" Yes?<br/>#Newline<br/>#NewlineThe conversation breaks down somewhat at this point#Comma but<br/>#Newlinethe robot nonetheless conveys an illusion of understanding<br/>#Newlinethe client's response.  With its response#Comma the robot is really <br/>#Newlinetelling the botmaster to create a new "YES" reply specific <br/>#Newlineto this situation:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;YES&lt;/pattern&gt;&lt;that&gt;WOULD YOU LIKE TO HAVE IT&lt;/that&gt;<br/>#Newline&lt;template&gt;Where do you usually get &lt;get_it/&gt;?&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineNow the next time we run the dialogue it ends with:<br/>#Newline<br/>#NewlineClient: NO I HAVE NO MONEY<br/>#NewlineRobot: I see. Would you like to have it?<br/>#NewlineClient: YES<br/>#NewlineRobot: Where do you usually get money?<br/>#Newline<br/>#NewlineThere is no automated technique to finding the conversation<br/>#Newlinepoints where the pronoun tags improve the flow of conversation.<br/>#NewlineThis is the "art" of AIML programming.  The example shown here<br/>#Newlinewith '"&lt;that/&gt;?" Yes?' exemplifies one approach to finding these<br/>#Newlineconversation way points.   There are no doubt countless other<br/>#Newlinetricks like this#Comma and the field is wide open to linguists and <br/>#Newlinewriters to help us uncover them.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES ALICE KEEP TRACK OF CONVERSATIONS,*,*,<br/>#NewlineOriginally ALICE used IP addresses to keep track of clients.<br/>#NewlineAssuming that everyone chatting with ALICE has a fixed IP<br/>#Newlineaddress#Comma at least for the duration of their conversation#Comma<br/>#Newlinethis technique works successfully.  Each IP address is a key<br/>#Newlineinto a hashtable (or database) that stores the client's<br/>#Newlinedialogue#Comma name#Comma and values of pronouns and other AIML values.<br/>#Newline<br/>#NewlineUnfortunately#Comma many clients have "dynamic IP addressing" enforced<br/>#Newlineby their ISP provider.  AOL and MS WebTV are two notorious examples: <br/>#Newlineeach successive client transaction appears to come from a different<br/>#Newlinehost.  For this reason#Comma program B uses a form of "virtual IP"<br/>#Newlineaddressing to track dialogues.  <br/>#Newline<br/>#NewlineThe form in index.html (and the ALICE home page) contains a<br/>#Newlinetag that creates a "hidden" parameter called "virtual" with<br/>#Newlinean initial value of "none."  The server assigns a unique name<br/>#Newlineto the value of "virtual"#Comma which then becomes a hidden variable<br/>#Newlinein the client's HTML form.  Each successive client transaction<br/>#Newlinecontains this virtual IP address; the server uses it as a key<br/>#Newlineto index the conversation.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES ALICE REMEMBER CLIENTS BETWEEN SESSIONS,*,*,<br/>#NewlineThe persistence of memory in ALICE is inherited from<br/>#Newlinethe Java Properties class.  The program B class Classifier<br/>#Newlinesaves the client name#Comma age#Comma location and other properties<br/>#Newlinein a set of Properties lists.  These Properties inherit<br/>#Newlinethe Java load and store methods.  Program B uses the load<br/>#Newlineand store methods to save the client properties in a set of<br/>#Newlinefiles with names ip_name.txt#Comma ip_age.txt#Comma ip_location.txt <br/>#Newlineand so on.  If these files become too large or bothersome#Comma<br/>#Newlinethere is no harm deleting or editing them#Comma or moving them<br/>#Newlineto another directory. <br/>#Newline<br/>#NewlineThe Applet requires no memory of the client properties#Comma because<br/>#Newlinethe applet has only the one client#Comma and in any case remains in <br/>#Newlinememory (at least for the lifetime of the client's browser cache).<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES PROGRAM B WORK,*,*,<br/>#NewlineThe basic loop of program B is to accept an input#Comma<br/>#Newlineeither from the GUI or from the Web#Comma to<br/>#Newlinepreprocess that input and segment it into sentences#Comma<br/>#Newlineand#Comma for each sentence#Comma to find the best match among<br/>#Newlinethe patterns#Comma and to return the corresponding reply.<br/>#NewlineEach reply is itself an AIML template#Comma in effect a mini-<br/>#Newlineprogram that tells program B how to construct the reply.<br/>#Newline<br/>#NewlineThe algorithm is thus divided into a matching phase<br/>#Newlineand a response evaluation phase.  In fact these two<br/>#Newlinephases interleave#Comma because the response may evoke<br/>#Newlinea recursive call to the pattern matcher with the<br/>#Newline&lt;srai&gt; or &lt;sr/&gt; tags.  <br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE APPLET DIFFER FROM THE APPLICATION,*,*,<br/>#NewlineThe Applet runs on the client's computer; the server runs<br/>#Newlineon your host machine.  The applet has fewer privileges and<br/>#Newlinetherefore a simpler user interface than the Application#Comma<br/>#Newlinewhich uses menus and buttons to control server-side functions.<br/>#NewlineThe Applet may reside on any web server#Comma such as one provided<br/>#Newlinewith an ISP account#Comma but the application requires a 24/7<br/>#Newlineconnection to the Web. <br/>#Newline<br/>#NewlineInternally#Comma the primary difference between the two programs<br/>#Newlineis that the Applet handles only one client conversation#Comma <br/>#Newlinewhile the application processes multiple client connections<br/>#Newlinesimultaneously.  The Applet also suppresses all HTML (and any<br/>#Newlineother XML) from the client response.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE APPLET WORK,*,*,<br/>#NewlineProgram B supports the creation of both server-side and client-side <br/>#Newlinechat robots.  The server runs as a thread in program B.  The <br/>#Newlineclient-side version is supported by an applet called Blet.java.<br/>#Newline<br/>#NewlineThe Applet Blet.java runs ALICE in a web browser#Comma or with <br/>#Newlinethe Java tool appletviewer.  The file "index.html" contains an<br/>#Newlineexample of the HTML Applet tag syntax needed to start<br/>#Newlinethe Applet.  The command "appletviewer index.html" will start the<br/>#NewlineApplet.<br/>#Newline<br/>#NewlineYou also have to create the file "index.html" and change the<br/>#Newlinedefault value of the parameters "codebase" and<br/>#Newline"applethost" serve the Applet from your location.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE LT CONDITION GT TAG WORK,*,*,<br/>#NewlineThis category illustrates the function of the<br/>#Newline(template-side) condition tag.  The input pattern<br/>#Newlineis "TEST COND":<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;TEST COND&lt;/pattern&gt;<br/>#Newline&lt;template&gt;<br/>#NewlineThis category has two condition statements.&lt;br&gt;<br/>#NewlineThe first is activated when you are on the host machine:&lt;br&gt;<br/>#Newline&lt;condition name="ip" value="localhost"&gt;<br/>#NewlineYou are the true botmaster.&lt;br&gt;<br/>#Newline&lt;/condition&gt;<br/>#NewlineThe second condition is activated when you claim to<br/>#Newlinebe the botmaster.&lt;br&gt;<br/>#Newline&lt;condition name="name" value="* WALLACE"&gt;<br/>#NewlineImposter!  You are not my real botmaster.&lt;br&gt;<br/>#Newline&lt;/condition&gt;<br/>#Newline<br/>#Newline<br/>#NewlineTwo dialogues from different hosts show two<br/>#Newlinepossible outputs of this category:<br/>#Newline<br/>#Newline<br/>#Newline--------------------dialup.mindspring.com--------------<br/>#NewlineClient: MY NAME IS DR WALLACE.<br/>#NewlineRobot: OK I will call you Dr Wallace.<br/>#NewlineClient: TEST COND.<br/>#NewlineRobot: This category has two condition statements. <br/>#NewlineThe first is activated when you are on the host machine:<br/>#NewlineThe second condition is activated when you claim to be the botmaster.<br/>#NewlineImposter! You are not my real botmaster. <br/>#NewlineThat concludes our test of the condition tag.<br/>#Newline---------------------localhost-------------------------<br/>#NewlineClient: TEST COND.<br/>#NewlineRobot: This category has two condition statements. <br/>#NewlineThe first is activated when you are on the host machine:<br/>#NewlineYou are the true botmaster.<br/>#NewlineThe second condition is activated when you claim to be the botmaster.<br/>#NewlineThat concludes our test of the condition tag.<br/>#Newline<br/>#Newline<br/>#NewlineNote:<br/>#Newline<br/>#Newline1. There may be multiple &lt;condition&gt; tags in the<br/>#Newline&lt;template&gt;.   [But nesting doesn't work yet.]<br/>#Newline<br/>#Newline2. The predname must be one of: it#Comma ip#Comma he#Comma she#Comma age#Comma<br/>#Newlinename#Comma topic#Comma gender#Comma location#Comma or one of the custom predicates<br/>#Newlinedefined in predicates.txt<br/>#Newline<br/>#Newline3. The value string may contain an AIML pattern with up to<br/>#Newlineone wild-card "*" symbol.<br/>#Newline<br/>#Newline4. The test for the &lt;condtion&gt; being true uses <br/>#NewlineUnifier.unify() to compare the stored predicate value<br/>#Newlinewith the value string.  This is the same way<br/>#Newline&lt;that&gt; and &lt;topic&gt; work.<br/>#Newline<br/>#Newline5. If the test returns true#Comma then the response contains<br/>#Newlinewhatever is inside the &lt;condition&gt;...&lt;/condition&gt; tags#Comma<br/>#Newlineotherwise those contents are blanked.<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE PERSONALITY WIZARD WORK,*,*,<br/>#NewlineThe simplest way to alter the content of the basic ALICE<br/>#Newlinerobot personality is to run the Personality Wizard on<br/>#Newlinethe "Options" menu (or in the Kid interface).  <br/>#NewlineThis wizard asks the botmaster a series<br/>#Newlineof questions to set the values of a set of robot<br/>#Newlinepersonality tags including its name#Comma gender#Comma preferences<br/>#Newlineand replies to very common questions.<br/>#Newline<br/>#NewlineThe Personality Wizard does not create any new AIML<br/>#Newlinecategories.  The replies set the value of global tags<br/>#Newlinelike &lt;location/&gt; and &lt;favorite_movie/&gt; that might be<br/>#Newlineused in many categories throughout the AIML knowledge<br/>#Newlinebase.  The basic set of Wizard questions are collected<br/>#Newlinein the file Personality.aiml. <br/>#Newline<br/>#NewlineHint: If you plan to use the Applet#Comma avoid the double-quote (")<br/>#Newlinecharacter in the Personality Wizard.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE RANDOM FUNCTION WORK,*,*,<br/>#NewlineThe random function is (so far) the only AIML method<br/>#Newlinewith a list argument.  Its purpose is random selection<br/>#Newlineof one of a set of text items.  In "old-style" AIML the<br/>#Newlinetext appendage operator "+" also served as a list-item<br/>#Newlinemarker.  In XML style we use the HTML &lt;li&gt; list-item<br/>#Newlinetag.  <br/>#Newline<br/>#Newline&lt;random&gt; &lt;li&gt;X1&lt;/li&gt;&lt;li&gt;X2&lt;/li&gt;  &lt;/random&gt;      Say one of X1 or X2 randomly<br/>#Newline&lt;random&gt;&lt;li&gt;A&lt;/li&gt;&lt;li&gt;B&lt;/li&gt;&lt;li&gt;C&lt;/li&gt;&lt;/random&gt; Say one of A#Comma B or C randomly<br/>#Newline<br/>#NewlineThe &lt;random&gt; tag has higher precedence than other AIML tags.<br/>#NewlineMoreover#Comma the AIML parser interprets only the markup inside<br/>#Newlinethe selected random list item.  AIML tags inside other list items<br/>#Newlineare ignored.<br/>#Newline<br/>,std-dont.aiml
0,HOW DOES THE WEB SERVER WORK,*,*,<br/>#NewlineBy default the web server starts on port 2001.  This means you can<br/>#Newlineaccess the web server through the URL http://localhost:2001 on<br/>#Newlineyour own machine.  Find out your IP address or DNS name and tell<br/>#Newlineyour friends to connect to "http://yourcompany.com:2001".<br/>#Newline(One way to find out your IP address is by running "netstat -n"<br/>#Newlineto view all your open TCP/IP connections).<br/>#Newline<br/>,std-dont.aiml
0,HOW MUCH MEMORY DO I NEED TO RUN PROGRAM B,*,*,<br/>#NewlineThe source code compresses to as little as half a megabyte#Comma including<br/>#Newlineall the AIML files for nearly 16#Comma000 categories.  You may have downloaded<br/>#Newlinea file of only around 500K.  Plan to use a minimum 10 MB of hard disk space<br/>#Newlinefor the download directory.  The hard disk requirements include not<br/>#Newlineonly the source code and Java class files#Comma but also the dialogue files<br/>#Newlineand other temporary files created by the robot.<br/>#Newline<br/>#NewlineThe RAM requirements vary depending on the size of your robot.<br/>#NewlineTo run the fully loaded ALICE chat robot with 16#Comma000 categories<br/>#Newlineyou will need 64MB of memory.  To do this and anything else at<br/>#Newlinethe same time on your system we recommend a minimum of 96MB.  <br/>#NewlineWith less memory you can load a smaller robot.  See the question<br/>#Newlinebelow "What is &lt;load filename="X"/&gt;?"<br/>#Newline<br/>,std-dont.aiml
0,HOW RECURSIVE IS AIML,*,*,<br/>#NewlineUnderstanding recursion is important to understanding AIML.<br/>#Newline"Recursion" means applying the same solution over and over<br/>#Newlineagain#Comma to smaller and smaller problems#Comma until you reduce<br/>#Newlinethe problem to its simplest form.  AIML uses the tags<br/>#Newline&lt;sr/&gt; and &lt;srai&gt; to implement recursion.  The botmaster<br/>#Newlineuses these tags to tell the robot how to respond to a<br/>#Newlinecomplex sentence by breaking it down into the responses<br/>#Newlineto simpler ones.  <br/>#Newline<br/>#NewlineRecursion can apply many times to a single input. Given<br/>#Newlinethe normalized input:<br/>#Newline<br/>#NewlineALICE CAN YOU PLEASE TELL ME WHAT LINUX IS RIGHT NOW <br/>#Newline<br/>#Newlinean AIML category with the pattern "_ RIGHT NOW" matches first#Comma<br/>#Newlinereducing the input to:<br/>#Newline<br/>#NewlineALICE CAN YOU PLEASE TELL ME WHAT LINUX IS<br/>#Newline<br/>#NewlineAnother pattern ("&lt;name/&gt; *") reduces it to:<br/>#Newline <br/>#NewlineCAN YOU PLEASE TELL ME WHAT LINUX IS<br/>#Newline<br/>#NewlineAnd then:<br/>#Newline<br/>#NewlinePLEASE TELL ME WHAT LINUX IS <br/>#Newline<br/>#Newlinereduces to:<br/>#Newline<br/>#NewlineTELL ME WHAT LINUX IS<br/>#Newline<br/>#Newlineand finally to:<br/>#Newline<br/>#NewlineWHAT IS LINUX<br/>#Newline<br/>,std-dont.aiml
0,I AM STILL HAVING PROBLEMS WITH THE APPLET,*,*,<br/>#NewlineIf your applet is looking at Blet.aiml and your web space is at <br/>#Newlinewww.myplace.org and your aiml files are in dirctory /alice/ then<br/>#Newlineyour load statements in Blet.aiml would look similar to this:<br/>#Newline&lt;load url="http://www.myplace.org/alice/Atomic.aiml"&gt;<br/>#Newline<br/>#NewlineIf this is what you have#Comma then open up the "Java Console" window<br/>#Newlinein your browser to get whatever debugging information is coming<br/>#Newlineout.  The Java console will display any error messages or<br/>#Newlineexceptions caught by program B.  Please report these<br/>#Newlineerrors to the ALICE and AIML mailing list at<br/>#Newlinealicebot.listbot.com.<br/>#Newline<br/>,std-dont.aiml
0,I TRIED RUNNING JAVA B AND I GOT A BAD COMMAND OR FILE NAME,*,*,<br/>#NewlineYou are using a Windows/DOS setup.  If "jview B" does not work either#Comma<br/>#Newlineyou may need to install Java on your computer.   Go to java.sun.com <br/>#Newlineand pick the one for your computer (Windows 95/98 or NT).<br/>#Newline<br/>#NewlineIf it still says "bad command" then possibly there is a problem with<br/>#Newlinethe CLASSPATH variable in AUTOEXEC.BAT.  Make sure it is set to<br/>#Newlinesomething like<br/>#NewlineSET CLASSPATH=.;%CLASSPATH%<br/>#Newline(The single "." means the current working directory)<br/>#Newlineand make sure the PATH is set to include the java home directory:<br/>#NewlineSET PATH=c:\JDK1.2\bin;%PATH%<br/>#Newline<br/>,std-dont.aiml
0,I TRIED TO COMPILE PRORGAM B AND GOT A LOT OF WARNINGS,*,*,<br/>#NewlineThe designers of Java and the designers of ALICE disagree<br/>#Newlineon one stylistic point: Java designers believe in the<br/>#Newline"one file-one class" philosophy#Comma at least for classes<br/>#Newlineused outside their own source file.  The ALICE engineers<br/>#Newlinefollow the opposite "one file-many classes" design principle#Comma<br/>#Newlinewhich allows us to group a number of logically related classes<br/>#Newlinein a single file#Comma such as Classifier.java.  The Java compiler<br/>#Newlinemight complain about a class used outside its file#Comma but<br/>#Newlinethese messages are just warnings.<br/>#Newline<br/>#NewlineIf you don't want to see the compiler warnings#Comma run the<br/>#Newlinecompiler with the "-nowarn" flag:<br/>#Newline<br/>#Newlinejavac -nowarn *.java<br/>#Newline<br/>,std-dont.aiml
0,IS THERE A WAY TO USE THE GUI INTERFACE TO ADD ONE CATEGORY AT A TIME,*,*,<br/>#NewlineYes.  Do a "clear".  Type in one category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO IS JOHN&lt;/pattern&gt;<br/>#Newline&lt;template&gt;He is a really smart guy.&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineNow do a "Add AIML".  If you like the result#Comma do a "Save Robot".<br/>#Newline<br/>#NewlineIf your name is not John#Comma try replacing JOHN with<br/>#Newlineyour own name.  Notice that the pattern is in all upper case.<br/>#NewlineThis is called "normalized form".  We store patterns this way<br/>#Newlinefor efficiency.  The template on the other hand consists of<br/>#Newlinemixed case.  <br/>#Newline<br/>#NewlineYou can also create a file of AIML#Comma do a cut &amp; paste#Comma and then "Add AIML"<br/>#Newlineto add more categories.  Editing the source file directly is of course also<br/>#Newlineuseful. If you edit the source file#Comma select "Load Robot" to load it.<br/>#Newline<br/>#NewlineTry creating a text file with the category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO IS JOHN WANG&lt;/pattern&gt;<br/>#Newline&lt;template&gt;<br/>#Newline&lt;random&gt;<br/>#Newline&lt;li&gt;He is a really smart guy.&lt;/li&gt;<br/>#Newline&lt;li&gt;&lt;set_he&gt;John Wang&lt;/set_he&gt; is a great father.&lt;/li&gt;<br/>#Newline&lt;/random&gt;<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineLoad the file into program B with the "File/Load Text File" <br/>#Newlinemenu item.  Then select "Add AIML" from the Botmaster menu.<br/>#Newline<br/>,std-dont.aiml
0,LIST TWELVE BASIC APPLET TIPS FOR AIML USERS,*,*,<br/>#Newline1. Applets are notoriously hard to debug; you are not dumb.<br/>#Newline2. An applet can work perfectly well in Appletviewer#Comma but<br/>#Newlinethen break in the browser#Comma for any number of reasons.<br/>#Newline3. Let's get the terminology straight: the applet resides on<br/>#Newlinean "originating host" but runs on a "target machine".<br/>#Newline4. The browser is very picky because of the "security<br/>#Newlinesandbox"--the browser doesn't trust Applets so they can't<br/>#Newlineopen files (and obey other restrictions) on the target machine.<br/>#Newline5. The Applet MAY open a socket connection from the<br/>#Newlinetarget machine to the originating host.<br/>#Newline6. When you are debugging the applet#Comma the target machine<br/>#Newlinemight be the same as the originating host (your computer).<br/>#Newline7. When you post your applet to a remote web server#Comma<br/>#Newlinethat server becomes the originating host.<br/>#Newline8. You can use ftp to transfer the Applet files to the<br/>#Newlineremote web server.<br/>#Newline9. You must transfer ALL the applet's files <br/>#Newlineto the originating host.<br/>#Newline10. You must change the program B values of "CodeBase"<br/>#Newlineand "AppletHost" (the originating host) to the name and<br/>#Newlinelocation of the files on the remote server.<br/>#Newline11. Use "Create applet" to create the "index.html" and<br/>#Newline"Blet.aiml" (make sure you have the latest release of B.zip)<br/>#Newline12. We recommend placing all the *.class files into<br/>#Newlinea single "Blet.jar" file (see DON'T READ ME).<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,LOWER LOWER,*,*,<br/>#NewlineIf you need even lower level access to the program B robot#Comma <br/>#Newlineyou can request responses to individual sentences on a <br/>#Newlineline-by-line basis.  Inside multiline_response() there are <br/>#Newlinecalls to the Classifier.respond() method like:<br/>#Newline<br/>#NewlineString response = respond(norm#Comma hname);<br/>#Newline<br/>#Newlinewhere "norm" is a normalized single-sentence input and hname is<br/>#Newlinethe virtual IP address of the client.  <br/>#Newline<br/>#NewlineInside respond() we find the the method respondIndex().  The<br/>#Newlinebase class StringSet stores the strings in an indexed vector#Comma<br/>#Newlineand respondIndex() locates the index of the best matched category<br/>#Newlinefor the normalized input string.<br/>#Newline<br/>#NewlineThe loop inside respondIndex() scans through the categories<br/>#Newlinein reverse alphabetical order by key#Comma until it finds the best<br/>#Newlinematch.  Because the "*" pattern comes first in alphabetical<br/>#Newlineorder#Comma and is the most general pattern#Comma respondIndex() will<br/>#Newlinereturn zero when no more specific category matches.<br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE 7 STEPS TO CREATING CONTENT,*,*,<br/>#Newline1. Run program B (ALICE Botmaster)<br/>#Newline<br/>#Newline2. Under "Options"#Comma select "Show Options". <br/>#NewlineFind the item called "AnalysisFile=" and<br/>#Newlinechange the value to the name of the dialogue<br/>#Newlinefile you want to analyze.  The default file<br/>#Newlinename is the same as the default log file<br/>#Newlinename#Comma "dialog.txt".<br/>#Newline <br/>#Newline3. Press the "Classify" button.  Wait<br/>#Newlineseveral minutes while the program processes<br/>#Newlinethe data from your log file.  When finished<br/>#Newlineit will display a "brain activation" table<br/>#Newlineshowing the patterns that activated each<br/>#Newlinecategory.  (You can use "File/Save As Text File"<br/>#Newlineto save this table to a file#Comma if you want).<br/>#Newline<br/>#Newline4. Now press the "Quick Targets" button.<br/>#NewlineYou will see a set of new categories created<br/>#Newlineby the program.  These are categories with<br/>#Newlinepatterns that have no specific response in the<br/>#Newlinerobot brain.  With these categories you have <br/>#Newline3 choices (A#Comma B or C):<br/>#Newline<br/>#Newline(A) Delete the category.  Many of the suggested<br/>#Newlinecategories are just nonsense or garbage inputs.<br/>#NewlineUse your cursor and left mouse button to select <br/>#Newlinethe categories for deletion.  <br/>#NewlineThe "delete" key will cut them.<br/>#Newline<br/>#Newline(B) Edit a new template.  The information you<br/>#Newlinesee displayed in the &lt;template&gt; tags is actually<br/>#Newlinethe pattern of the default category into which<br/>#Newlinethis input was classified.  For example you may see:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO IS 007&lt;/pattern&gt;&lt;template&gt;WHO IS *&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThis tells us that the robot classified the client "WHO IS 007"<br/>#Newlineas "WHO IS *".  Use the cursor and left mouse button<br/>#Newlineto cut the "WHO IS *"#Comma and replace it with a new template<br/>#Newlineof your own design:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO IS 007&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;set_he&gt;007&lt;/set_he&gt; is James Bond#Comma the<br/>#Newlinefamous fictional spy from the novels of Ian Fleming.<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newline(C) Edit a new pattern.  Many of the patterns<br/>#Newlinesuggested by "Quick Targets" and "More Targets" are<br/>#Newlinetoo specific#Comma but with a little practise you<br/>#Newlinecan easily see how to generalize these suggestions<br/>#Newlinewith the "*" wild-card.<br/>#Newline<br/>#NewlineFor example you may see one like this:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO BOMBED PEARL HARBOR&lt;/pattern&gt;<br/>#Newline&lt;template&gt;WHO *&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThe original response was based on "WHO *"#Comma which<br/>#Newlineis too general for this topic.  But the odds<br/>#Newlineare small of anyone else using this exact pattern <br/>#NewlineWHO BOMBED PEARL HARBOR when asking about the<br/>#Newlinesame topic.  Think about the alternative ways<br/>#Newlineof expressing the same question: <br/>#Newline"Who attacked Pearl Harbor?"#Comma "Who invaded Pearl<br/>#NewlineHarbor?"#Comma "Who through deceit and subterfuge<br/>#Newlinecarried out an unscrupulous and unprovoked suprise<br/>#Newlineattack on American forces at Pearl Harbor?"<br/>#NewlineYou can cover all of these inputs by generalizing<br/>#Newlinethe input pattern with the wild-card "*"#Comma<br/>#Newlinewhich matches any word or sequence of words:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHO * PERAL HARBOR&lt;/pattern&gt;<br/>#Newline&lt;template&gt;The Japanase <br/>#Newlineattacked Pearl Harbor on December 7#Comma 1941#Comma<br/>#Newline"A day that will live in infamy" (FDR). <br/>#Newline&lt;A href="http://www.pearlharbor.org"&gt;...<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineRemember#Comma the AIML pattern language allows<br/>#Newlineat most one wild-card "*" per pattern.<br/>#Newline<br/>#NewlineOf course#Comma with choice (C) you have to<br/>#Newlineedit the template as well as the pattern.  <br/>#Newline<br/>#Newline5. When finished with editing the suggested categories#Comma<br/>#Newlineuse "Botmaster - Add AIML" to add the new AIML content.<br/>#NewlineIf you made any syntax errors#Comma you can fix them<br/>#Newlineand repeat the "Add AIML" as many times as needed.<br/>#NewlineBe sure to do a "File - Save Robot" at this point<br/>#Newlinealso to back up your changes.  This will save all of<br/>#Newlineyour new categories in the root robot file<br/>#Newline"B.aiml".  <br/>#Newline<br/>#Newline6. Use "More Targets" to find more new categories<br/>#Newlineuntil the new suggestions are fruitless.  Then#Comma go<br/>#Newlineback and start with "Classify" again (step [3]). <br/>#Newline<br/>#Newline7. The responses you create should be a combination<br/>#Newlineof a "conversational" response like "He is James<br/>#NewlineBond#Comma the famous spy" and also provide some HTML<br/>#Newlinehyperlinks where appropriate. <br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE ALL THE OPTIONS FOR PROGRAM B,*,*,<br/>#NewlineThere are robot personality options#Comma animated agent options#Comma<br/>#Newlinelog file and analysis options#Comma and options for the web server<br/>#Newlineand for the applet.  Most of the time you won't need to change<br/>#Newlinemany of these values.  For completeness#Comma the entire set<br/>#Newlinebreaks down into:<br/>#Newline<br/>#NewlineRobot options:<br/>#Newline<br/>#NewlineSign - Astrological sign<br/>#NewlineWear - clothing and apparel<br/>#NewlineForFun - What the robot does for fun<br/>#NewlineBotFile - Root file of robot personality<br/>#NewlineBotName - Robot name<br/>#NewlineFriends - The robot's friends<br/>#NewlineLookLike - The robot appearance<br/>#NewlineQuestion - A random question<br/>#NewlineTalkAbout - favorite subjects<br/>#NewlineKindMusic - Favorite kind of music<br/>#NewlineBoyFriend - Does the robot have a boyfriend?<br/>#NewlineBotMaster - Robot author<br/>#NewlineBotGender - male#Comma female or custom<br/>#NewlineGirlFriend - Does the robot have a girlfriend?<br/>#NewlineBotLocation - Robot location<br/>#NewlineBotBirthday - Robot activation date<br/>#NewlineFavoriteBook - Robot's favorite book<br/>#NewlineFavoriteFood - Robot's favorite food<br/>#NewlineFavoriteSong - Robot's favorite song<br/>#NewlineFavoriteBand - Robot's favorite band<br/>#NewlineFavoriteMovie - Robot's favorite movie<br/>#NewlineFavoriteColor - Robot's favorite color<br/>#NewlineBotBirthplace - Robot's birthplace<br/>#Newline<br/>#NewlineMS Agent options:<br/>#Newline<br/>#NewlineAnimagent - true or false for activating MS Agent VB scripting<br/>#NewlineACFURL - file or URL location of MS Agent software<br/>#Newline<br/>#NewlineLog/Analysis options:<br/>#Newline<br/>#NewlineAnalysisFile - file selected for log file analysis<br/>#NewlineLogFile - file for recording robot dialogues<br/>#NewlineClientLineContains - a pattern identifying input lines in logfiles<br/>#NewlineRobotLineStarts - a pattern identifying robot lines in logfiles<br/>#NewlineStartLine - starting line for analysis<br/>#NewlineEndLine - ending line for log file analysis<br/>#Newline<br/>#NewlineApplet options:<br/>#Newline<br/>#NewlineAppletHost - DNS name or IP address of applet's server.<br/>#NewlineCodeBase - URL or directory of applet code.<br/>#Newline<br/>#NewlineWeb server options:<br/>#Newline<br/>#NewlineClerkTimeout - Web server option to retire waiting clerks<br/>#NewlineBrainSize - a threshold number of categories to display "loading"<br/>#NewlineAdvertize - a boolean parameter to optionally display ad<br/>#NewlineBeep - Web server option to beep on client connections<br/>#Newline<br/>#NewlineOther:<br/>#Newline<br/>#NewlineVersion - read only version number<br/>#NewlineTempFile - scratch file for temporary data<br/>#NewlineMergePolicy - 'Merge' or 'Discard' depending on how you <br/>#Newline  want to handle duplicate key categories.<br/>#Newline<br/>#NewlineAll of the options reside in the globals.txt file.  Running<br/>#Newlineprogram B#Comma choose "Options/Show Options" to see the<br/>#Newlinecontents of the file.<br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE DEPRECATED APIS,*,*,<br/>#NewlineOne of the biggest challenges facing a Java application<br/>#Newlinedeveloper is finding a "lowest common denominator" subset of the<br/>#NewlineJava language that works on all the platforms and versions<br/>#Newlineout there.  The Java language itself is a moving target.<br/>#NewlineWhen Sun's Java designers upgrade the language they sometimes<br/>#Newlinedeclare certain methods "deprecated"#Comma which means absolutely<br/>#Newlinenothing except that the designers have developed a newer#Comma "better"<br/>#Newlinemethod and one day these older methods may disappear from<br/>#Newlinethe language.  Usually however the latest Java releases<br/>#Newlinesupport all of the old deprecated methods.<br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE JUSTTHAT AND JUSTBEFORETHAT,*,*,<br/>#Newline&lt;beforethat/&gt;#Comma &lt;justthat/&gt; and &lt;justbeforethat/&gt; are new#Comma experimental<br/>#NewlineAIML tags.  The idea here is to represent more "state" in the dialogue<br/>#Newlinethan just "that":<br/>#Newline<br/>#NewlineClient: BeforeThat.<br/>#NewlineRobot: ...JustBeforeThat.<br/>#NewlineClient: JustThat.<br/>#NewlineRobot: ...That.              <br/>#NewlineClient: Input.               <br/>#NewlineRobot: &lt;justthat/&gt; = JustThat <br/>#Newline       &lt;justbeforethat/&gt; = JustBeforeThat<br/>#Newline       &lt;beforethat/&gt; = BeforeThat<br/>#Newline<br/>#NewlineThe following dialogue fragment illustrates the use of these tags:<br/>#Newline<br/>#NewlineClient: MY NAME IS RICH.<br/>#NewlineRobot: Rich#Comma are you my master?<br/>#NewlineClient: YES.<br/>#NewlineRobot: Tell me more.<br/>#NewlineClient: JUST THAT.<br/>#NewlineRobot: "my name is rich"                   [&lt;justthat/&gt;]<br/>#NewlineClient: JUST BEFORE THAT.<br/>#NewlineRobot: "Tell me more"                      [&lt;justbeforethat/&gt;]<br/>#NewlineClient: BEFORE THAT.<br/>#NewlineRobot: "Yes"                               [&lt;beforethat/&gt;]<br/>#Newline<br/>#Newline<br/>#NewlineThere is an asymmetry between the client's tags (&lt;beforethat/&gt; and &lt;justthat/&gt;)<br/>#Newlineand the robot's tags (&lt;justbeforethat/&gt; and &lt;that/&gt;).  The Responder<br/>#Newlinebreaks down each multiple-line client input into individual sentences.<br/>#NewlineThe log file records each client input sentence individually#Comma and shows<br/>#Newlinethe robot's reponses line by line.  The robot#Comma on the other hand#Comma may<br/>#Newlinerespond to a single input sentences with multiple response sentences.<br/>#NewlineThe &lt;that/&gt; and &lt;justbeforethat/&gt; tags refer to only the last sentence<br/>#Newlinein the robot's reply.  The client tags &lt;beforethat/&gt; and &lt;justthat/&gt; always<br/>#Newlinerefer to the current and previous client input lines#Comma even if they were<br/>#Newlinepart of a multiline input.   In the descriptive dialogue above <br/>#Newlinewe used the notation "Client: BeforeThat." and "Robot: ...JustBeforeThat."#Comma<br/>#Newlinewith ellipses representing sentences in the robot reply#Comma to emphasize<br/>#Newlinethe asymmetry.  If all the robot responses consisted of exactly one <br/>#Newlinesentence each#Comma the asymmetry would disappear.<br/>#Newline<br/>#NewlineIn the future we may expand AIML categories to include such<br/>#Newline"deeper context"#Comma along the lines of the &lt;that&gt;...&lt;/that&gt; tag#Comma<br/>#Newlineif there is a need for it.<br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE THE GET METHODS,*,*,<br/>#NewlineGet methods are logically atomic tags#Comma i.e. they enclose no text.<br/>#Newline(similar to say &lt;P&gt; or &lt;IMG&gt; in HTML). But XML requires closing tags.<br/>#Newline<br/>#NewlineAll the "get" methods retrieve values stored relative<br/>#Newlineto a particular client IP address.  We use<br/>#Newlinehash tables to store the maps from IP to these attributes.<br/>#Newline<br/>#Newline&lt;get_ip/&gt;        Get the client's IP address<br/>#Newline&lt;getsize/&gt;       A string indicating robot memory size<br/>#Newline&lt;getversion/&gt;    The ALICE program version<br/>#Newline&lt;getname/&gt;       client's name<br/>#Newline&lt;gettopic/&gt;      The "topic" of conversation<br/>#Newline&lt;name/&gt;          Robot's name<br/>#Newline&lt;location/&gt;      Robot's location<br/>#Newline&lt;gender/&gt;        Robot's gender<br/>#Newline&lt;birthday/&gt;      Robot's birthday<br/>#Newline&lt;that/&gt;          what robot said previously<br/>#Newline&lt;get_location/&gt;  the client's geographic location<br/>#Newline&lt;get_it/&gt;        the value of "it"<br/>#Newline&lt;get_they/&gt;      the value of "they"<br/>#Newline&lt;get_he/&gt;        the value of "he"<br/>#Newline&lt;get_she/&gt;       the value of "she"<br/>#Newline&lt;get_we/&gt;        the value of "we"<br/>#Newline&lt;get_gender/&gt;    a string like "she" or "he" for client gender<br/>#Newline<br/>#NewlineIn XML languages there is always a tradeoff between creating attributes<br/>#Newlineand creating new tags.  The get methods are really all special instances<br/>#Newlineof a more general &lt;get attribute="name"&gt;#Comma for example<br/>#Newline&lt;get_we/&gt; = &lt;get attribute="we"/&gt;<br/>#Newline<br/>#NewlineThe attributes with explicit "get" names (getname#Comma get_it#Comma get_we etc.)<br/>#Newlineare client-specific properties.  The other attributes (e.g. &lt;name/&gt; and<br/>#Newline&lt;botmaster/&gt;) relate to the robot.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT ARE THE SET METHODS,*,*,<br/>#NewlineSet methods consist of single-tag and double-tag markup.  The<br/>#Newlinemethods<br/>#Newline<br/>#Newline&lt;set_male/&gt;              the client gender is male<br/>#Newline&lt;set_female/&gt;            the client gender is female<br/>#Newline&lt;set_animagent/&gt;         activates the animation agent. <br/>#Newline<br/>#Newline<br/>#Newline&lt;setname&gt; X &lt;/setname&gt;    sets the client name to X<br/>#Newline&lt;settopic&gt; X &lt;/settopic&gt;  sets the topic to X<br/>#Newline&lt;set_it&gt; X &lt;/set_it&gt;      sets the value of "it" to X <br/>#Newline&lt;set_location&gt; X &lt;/set_location&gt; sets the value of client location<br/>#Newline&lt;set_they&gt; X &lt;/set_they&gt;  sets the value of "they" to X   <br/>#Newline&lt;set_he&gt; X &lt;/set_he&gt;      sets the value of "he" to X   <br/>#Newline&lt;set_she&gt; X &lt;/set_she&gt;    sets the value of "she" to X <br/>#Newline&lt;set_we&gt; X &lt;/set_we&gt;      sets the value of "we" to X <br/>#Newline<br/>#Newline&lt;set_thought&gt; X &lt;/set_thought&gt; is a custom tag suggested by Andrew <br/>#NewlinePotgieter for storing a predicate for "what are you  thinking about?"  <br/>#NewlineSee the documentation on custom tags and the predicates.txt file.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DO YOU MEAN BY THE COMMAND JAVA B,*,*,<br/>#NewlineThis does not mean you mean click on an icon.  If you are using Windows#Comma<br/>#Newlineyou must use a DOS window to run a Java program.  Find the MS-DOS item<br/>#Newlineon your start menu or desktop and open up a DOS window.  In that window#Comma use<br/>#Newlinethe DOS commands CD (change directory) to move to the "B" directory.   <br/>#NewlineThen type "java B" to run the program.<br/>#Newline<br/>#NewlineIf you are using windows#Comma then you can create a desktop icon <br/>#Newlineas a "shortcut" to a batch file.  Create a batch file called<br/>#Newline"launch.bat" in the program B directory.  The file contains only<br/>#Newlineone line with the text "java B".  There is an AIML icon file<br/>#Newlineincluded with program B called "aiml.ico".  You can use this<br/>#Newlinefile to add an icon to your desktop.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES CLASSIFY DO,*,*,<br/>#NewlineThe key to chat robot development is log file analysis.  The program<br/>#Newlinestores client dialogues in a file called "dialog.txt" (unless you<br/>#Newlinechange this default name).  The "Classify" button activates a routine<br/>#Newlinethat scans the dialogue file and reports how many times each<br/>#Newlinecategory is activated.   The processing may take several minutes#Comma<br/>#Newlinedepending on the size and range of the dialogue file chosen.  The<br/>#Newlineresult appears as a table in the Edit View window.  The program<br/>#Newlinedisplays the categories sorted by activation count.  <br/>#Newline<br/>#NewlineThe format of each output line is:<br/>#Newline<br/>#NewlineP% (Q%) T PATTERN = N1 W1 + N2 W2 + ...<br/>#Newline<br/>#NewlineWhere<br/>#Newline<br/>#NewlineP = Percent of inputs classified in this category<br/>#NewlineQ = Cumulative percent up to this category<br/>#NewlineT = Total count of inputs activating this category<br/>#NewlineNi = number of times input Wi detected (blank if Ni = 1)<br/>#NewlineWi = normalized input pattern activating this category<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES CLEAR DO,*,*,<br/>#NewlineTo enter another robot query#Comma clear the screen with the "Clear"<br/>#Newlinebutton.  Enter a new String like "How are you?" and press "Say."<br/>#Newline<br/>#Newline"Send" and "Clear" provide a simple way to communicate with the<br/>#Newlinechat bot through the Edit View.  Try cutting and pasting a paragraph#Comma<br/>#Newlinesuch as an e-mail message#Comma into the Edit View and press "Send".  <br/>#NewlineSee how the robot would reply to your multiline message.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES HELP DO,*,*,<br/>#NewlineThe "Help" button displays a random FAQ question that ALICE<br/>#Newlineknows the answer to.  You can see the answer by pressing the<br/>#Newline"Send" button.<br/>#Newline<br/>#NewlineThe Help menu provides the same function as the Help button<br/>#Newlineunder the selection "Random Help Question."  Select a random<br/>#NewlineHelp question and obtain the reply with the "Send" button.<br/>#Newline<br/>#NewlineThe Help menu also contains an item to Show All Help Questions.<br/>#NewlineThis command lists all the FAQ questions the robot knows.  You can<br/>#Newlineselect one question by deleting the others.   Obtain the<br/>#Newlineanswer with the "Send" button.<br/>#Newline<br/>#NewlineThe menu item "Ask Help Question" is the same as "Send".  This<br/>#Newlineitem asks the robot the Help question(s)#Comma and displays the reply.<br/>#Newline<br/>#NewlineThe Help menu displays the entire FAQ with the "Don't Read Me"<br/>#Newlineselection.  Finally#Comma the "GNU Public License" menu items displays<br/>#Newlinethe open source software license for program B.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES QUICK TARGETS DO,*,*,<br/>#NewlineAfter running Classify#Comma the Quick Targets button displays a set of<br/>#Newlinenew AIML categories for editing.   The program uses statistics to<br/>#Newlinefind new category candidates.  These categories are displayed as<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt; NEW PATTERN &lt;/pattern&gt;  &lt;template&gt; OLD PATTERN &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newlinewhere OLD PATTERN is the pattern from the original category and<br/>#NewlineNEW PATTERN is the proposed new input pattern.<br/>#Newline<br/>#NewlineThe botmaster may choose to either delete or edit the new category.<br/>#NewlineIf the new category is not desired#Comma delete it by selecting the<br/>#Newlinecategory from the text area and "cut" the text with the "delete"<br/>#Newlinekey.<br/>#Newline<br/>#NewlineIf the new category appears useful#Comma edit the OLD PATTERN string to<br/>#Newlinecreate a new reply.  Optionally#Comma the NEW PATTERN may also be edited#Comma<br/>#Newlinedepending on how specific a pattern the botmaster desires.<br/>#Newline<br/>#NewlineWhen finished editing the Target categories#Comma go to the "Botmaster"<br/>#Newlinemenu and select "Add AIML".    The "Add AIML" menu item will read the<br/>#Newlinetext displayed in the Edit View and parse it into new AIML categories.<br/>#NewlineThe botmaster may then save the updated robot with the "File/Save Robot"<br/>#Newlineor "File/Save Robot As" menu items.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES SEND DO,*,*,<br/>#NewlineType a text string like "hello" into the Text Area <br/>#Newline(Edit View) and press the "Send" button.  Notice that program B<br/>#Newlinereplaces the text in the Edit View with a reply from the robot.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES THE EDIT MENU DO,*,*,<br/>#Newline  Paste contents of clipboard into the program B text area.<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES THE FILE MENU DO,*,*,<br/>#Newline  Save and load text files (transfer contents to/from text area);<br/>#Newline    <br/>#Newline  Save and load robot (AIML) files.<br/>#Newline  1. By default#Comma AIML files use the .aiml file extension.<br/>#Newline  2. The default robot file is called "B.aiml"<br/>#Newline  3. By default the robot files reside in the same directory as<br/>#Newline     program B<br/>#Newline  4. Robot files begin and end with the tags &lt;alice&gt; and &lt;/alice&gt;<br/>#Newline  5. "Save Robot" overwrites the default robot file (see 2).<br/>#Newline  6. "Save Robot As" can be used to copy a robot.<br/>#Newline<br/>#Newline  Exit - exit the program<br/>#Newline<br/>,std-dont.aiml
0,WHAT DOES THE OPTIONS MENU DO,*,*,<br/>#Newline  Display and save chat robot options.<br/>#Newline  Use start and end index to select a range of lines<br/>#Newline  from the dialog file.<br/>#Newline<br/>#Newline  Toggle Beep - Make a sound when a remote client connects.<br/>#Newline<br/>,std-dont.aiml
0,WHAT FILES ARE NEEDED TO RUN THE PROGRAM B WEB SERVER,*,*,<br/>#NewlineThe program B directory must contain the HTML files header.html#Comma<br/>#Newlinetrailer.html#Comma loading.html and HOME.html.  You can customize these files for<br/>#Newlineyour bot#Comma but take care with "header" and "trailer" because<br/>#Newlineprogram B uses these files to construct an HTML reply <br/>#Newline(by inserting the robot reply and the text form between the <br/>#Newline"header" and the "trailer").  Use "header" and "trailer" to<br/>#Newlinecustomize the robot with your own logo and links.<br/>#Newline<br/>#NewlineProgram B needs at least one AIML file#Comma usually called B.aiml<br/>#Newlineby default. The AIML file may contain &lt;load&gt; tags that recursively<br/>#Newlineload other AIML files; these must also be present.<br/>#Newline<br/>#NewlineThe program also requires the file "globals.txt"<br/>#Newlinewhich it reads at start up. <br/>#Newline<br/>#NewlineThe files "language.txt" and "predicates.txt" are option.<br/>#Newline"language.txt" controls the language of the buttons and<br/>#Newlinemenu items in the program B GUI.  The file "predicates.txt"<br/>#Newlinedefines any custom predicates.<br/>#Newline<br/>#NewlineProgram B also reads the files "gnu.txt" (the GNU Public License)<br/>#Newlineand "dont.txt" (this file). <br/>#Newline<br/>,std-dont.aiml
0,WHAT FILES DO I NEED TO RUN THE APPLET,*,*,<br/>#NewlineYou only need the java *.class files and the *.aiml files<br/>#Newlineto run the ALICE Applet#Comma no more files are necessary. <br/>#NewlineYou can also put all the class files in a single jar<br/>#Newlinefile like Blet.jar.  The sample index.html provided with the ALICE <br/>#Newlinedistribution uses this Blet.jar file.  <br/>#Newline<br/>#NewlineNot all of the Java source files are involved in the Applet.<br/>#NewlineYou can use the following command to compile all the Java source<br/>#Newlinefiles needed for the Applet:<br/>#Newline<br/>#Newlinejavac Access.java Globals.java StringFile.java Substituter.java \<br/>#Newline   Classifier.java Loader.java Animagent.java Log.java Blet.java<br/>#Newline<br/>#NewlineThen#Comma you can use zip (or jar) to collect the class files into<br/>#Newlinea single jar file:<br/>#Newline<br/>#Newlinezip -r Blet.jar *.class <br/>#Newline<br/>#NewlineThe *.class will include all the class files you compiled.  <br/>#Newline<br/>#NewlineThe *.aiml files have to be on the same host that serves the Applet. An applet<br/>#Newlinecan only open files on the server it originated from.<br/>#Newline<br/>#NewlineDon't forget to change the Applet host parameters in index.html#Comma when<br/>#Newlineyou upload the applet to an ISP.<br/>#Newline<br/>,std-dont.aiml
0,WHAT HAPPENS TO CONTRACTIONS AND PUNCTUATION,*,*,<br/>#NewlineProgram B has a class called Substituter that performs a number<br/>#Newlineof grammatical and syntactical substitutions on strings. <br/>#NewlineOne task involves preprocessing sentences to remove ambiguous<br/>#Newlinepunctuation to prepare the input for segmentation into individual<br/>#Newlinesentence phrases.  Another task expands all contractions and<br/>#Newlinecoverts all letters to upper case; this process is called<br/>#Newline"normalization".  <br/>#Newline<br/>#NewlineThe Substituter class also performs some spelling correction.<br/>#Newline(See also the question "What is &lt;person/&gt;?")<br/>#Newline<br/>#NewlineOne justification for removing all punctuation from inputs<br/>#Newlineis the need to make ALICE compatible with speech input systems#Comma<br/>#Newlinewhich of course do not detect punctuation (unless the speaker<br/>#Newlineutters the actual word for the punctuation mark -- "period").<br/>#Newline<br/>,std-dont.aiml
0,WHAT IF I DO NOT WANT TO DISCARD DUPLICATE CATEGORIES,*,*,<br/>#NewlineUsing the global parameter MergePolicy#Comma you can choose<br/>#Newlineto either "Merge" or "Discard" templates with duplicate keys.<br/>#NewlineIf you choose the "Merge" option then the program applies a <br/>#Newlineheuristic to try to merge the two responses together with<br/>#Newlinea "&lt;random&gt;" tag.  The results of this operation may be<br/>#Newlineunpredictable#Comma so the program logs all duplicates in a file<br/>#Newlinecalled "duplicates.txt".<br/>#Newline<br/>#NewlineThe heuristic merge works as follows: Suppose X and Y are the two<br/>#Newlinetemplates to merge into a new template Z.   Let X be the new template<br/>#Newlineand Y the existing one.  Assume that X and Y are either &lt;random&gt; <br/>#Newlinelists or "atomic"#Comma in the sense that they contain no &lt;random&gt; tags.<br/>#NewlineIf X and Y are both "atomic" then Z = &lt;random&gt;&lt;li&gt;X&lt;/li&gt;&lt;li&gt;Y&lt;/li&gt;&lt;/random&gt;.  <br/>#NewlineIf Y is a &lt;random&gt; list atomic then the program checks to see if X is<br/>#Newlinealready a member of that list#Comma to avoid duplicate list items.  Otherwise#Comma<br/>#NewlineZ = the &lt;random&gt; list from Y with X inserted.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS A SYMBOLIC REDUCTION,*,*,<br/>#NewlineIn general there are a lot of categories whose job is<br/>#Newline"symbolic reduction".  The category:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;ARE YOU VERY *&lt;/pattern&gt;<br/>#Newline&lt;template&gt;&lt;srai&gt;ARE YOU &lt;star/&gt;&lt;/srai&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThis category [in Brain.aiml] will reduce "Are you very very smart"<br/>#Newlineto "Are you smart".<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS ARE THE LT PERSON GT TAGS,*,*,<br/>#NewlineThe &lt;person&gt; and &lt;person2&gt; tags indicate a place where the<br/>#NewlineAIML interpreter changes the personal pronouns in a sentence.<br/>#Newline<br/>#Newline&lt;person2&gt; X &lt;/person2&gt;   change X from 1st to 2nd person<br/>#Newline&lt;person&gt; X &lt;/person&gt;    exchange 1st and 3rd person<br/>#Newline<br/>#Newline&lt;person2&gt; is not often used.  The main application is<br/>#Newline"gossip":<br/>#Newline<br/>#NewlineClient: I admire robots like you.<br/>#NewlineRobot: That's good information: Joe said he admire robots like me.<br/>#Newline<br/>#NewlineThe transformation is a combination of:<br/>#Newline<br/>#Newline1. change the first person pronouns to second person.<br/>#Newline2. change the third person pronouns to first person.<br/>#Newline<br/>#NewlineThe array in Substituter.java is incomplete.  We need more substitutions<br/>#Newlineto make person2 work really well.<br/>#Newline<br/>#NewlineThe &lt;person&gt; substitution is much more common and easier<br/>#Newlineto understand#Comma because it simply exchanges 1st and 3rd person<br/>#Newlinepronouns.  The main issue with &lt;person&gt; in English is knowing<br/>#Newlinewhen to use "I" and when to use "me".<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS ACCESS,*,*,<br/>#NewlineClass Access is the abstraction for log file analysis to<br/>#Newlineextract dialogues.  In a typical chat robot server scenario#Comma<br/>#Newlinethe program records each line of client input and the robot<br/>#Newlinereply in a log file.  Given many simultaneous conversations#Comma<br/>#Newlinethese dialogues are interleaved in the log file.  The purpose<br/>#Newlineof class Access is to unravel these conversations into<br/>#Newlineindividual threads by client.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS ALICEREADER,*,*,<br/>#NewlineAliceReader is an efficient#Comma small-footprint XML interpreter<br/>#Newlinehard coded by Kris Drent specifically for reading AIML categories.  <br/>#NewlineEach category has a pattern#Comma a template#Comma and an optional topic and<br/>#Newlinethatpattern.  AliceReader scans the AIML input and tries to<br/>#Newlineidentify these fields as quickly as possible.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS B,*,*,<br/>#NewlineClass B is the old name for the Swing version of class Bawt#Comma but<br/>#Newlinenow just extends Bawt.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS BAWT,*,*,<br/>#NewlineThe class Bawt is the Java application#Comma and implements the GUI.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS BLET,*,*,<br/>#NewlineThe Blet class is the applet#Comma but is similar in many ways to the application.<br/>#NewlineThe applet is a stripped down version of the program#Comma with a simpler GUI<br/>#Newlineand no "botmaster" privileges. Also#Comma the Blet class doesn't utilize the<br/>#Newlineweb server#Comma because it runs as a client-side applet.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS BRAIN,*,*,<br/>#NewlineBrain extends StringSorter#Comma and uses StringRanker.  The sorted<br/>#Newlinestrings in the Brain class are keys formed by combining the<br/>#Newlinepattern#Comma that#Comma and topic strings.  In the original versions<br/>#Newlineof ALICE#Comma there were no "that" and no "topic" tags#Comma so the<br/>#NewlineBrain class simply mapped input patterns to output templates.<br/>#NewlineWith the addition of the "that" and "topic" tags we had to<br/>#Newlinecreate the "key" from the combination of all three.<br/>#Newline<br/>#NewlineThe "Target" objects in class Brain are instances of StringRanker.<br/>#NewlineThese structures form the basis of the classification and targeting<br/>#Newlinealgorithms in program B.  For each category#Comma the Targetmap contains<br/>#Newlinean instance of StringRanker storing the inputs classified into<br/>#Newlinethat category.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS CLASSIFIER,*,*,<br/>#NewlineThe class Classifier might as well be called "bot" because it contains<br/>#Newlinethe basic functionality of the chatterbot algorithm.  <br/>#Newline<br/>#NewlineSee the question "How can I interace my Java program to ALICE?" for<br/>#Newlineadditional information about the class Classifier.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS DIALOGUE,*,*,<br/>#NewlineA Dialogue (not to be confused with a Dialog class!) is<br/>#Newlinethe representation of the conversation between the client<br/>#Newlineand the robot.  The basic data structure is a pair of String arrays<br/>#Newlineclient_said[] and robot_said[] that store the alternating<br/>#Newlinestatements of client and robot.  The Dialogue also<br/>#Newlineencodes the length#Comma hostname#Comma and start and end tag<br/>#Newlineinformation.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS GLOBALS,*,*,<br/>#NewlineGlobals is the repository for all of the botmaster-selectable<br/>#Newlineparameters in program B.  The Globals class corresponds to<br/>#Newlinethe "Options" menu on the program B menu bar.  Globals contains<br/>#Newlinemethods toFile() and fromFile() to make these values<br/>#Newlinepersistent between sessions.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS INTSET,*,*,<br/>#NewlineIntSet represents a set of integers.  Were we using Java<br/>#NewlineCollections this would likely be a Set#Comma but the simple<br/>#Newlinerequirements of program B allow us to create a simple<br/>#NewlineIntSet class.<br/>#Newline<br/>#Newline"Set" means that the object has only one occurance of each item:<br/>#Newline{1#Comma 4#Comma 2#Comma 9} is a set of integers; {1#Comma 1#Comma 2} is not.<br/>#Newline <br/>,std-dont.aiml
0,WHAT IS CLASS KID,*,*,<br/>#NewlineClass Kid is a simplified graphical user interface#Comma "easy enough<br/>#Newlinefor kids" to run.  Program Kid does not evoke program B#Comma but the Kid<br/>#Newlinemay be started from the program B options menu.  The logic here<br/>#Newlineis that kids should be able to have conversations with the chat<br/>#Newlinerobot#Comma but parents may not want kids to start chat robot servers<br/>#Newline(see Appendix B: Note to Parents).<br/>#Newline<br/>#NewlineClass Kid utilizes RobotCommunicator as its interface to the<br/>#Newlinechat robot.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS LINECLASSIFIER,*,*,<br/>#NewlineIn the file Log.java you will find an Interface called LineProcessor<br/>#Newlinewith one required method: process_line().  The LineProcessor<br/>#Newlineis the abstraction of an algorithm that reads a file one line at a time#Comma<br/>#Newlineprocesses each line as a data record#Comma and moves on to the next.<br/>#Newline<br/>#NewlineLineClassifier implements LineProcessor because it reads lines<br/>#Newlineof text from the log file and identifies client input lines for<br/>#Newlineclassification. What makes classification efficient is the way<br/>#NewlineLineClassifier stores the client lines in a SortedStringSet#Comma called<br/>#NewlineLines.   Becuase the matching algorithm proiritizes the patterns<br/>#Newlinealphabetically#Comma LineClassifier can classify an element from Lines<br/>#Newlinein O(1) time.<br/>#Newline<br/>#NewlineThe code for LineClassifier is in Classifier.java.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS LOADER,*,*,<br/>#NewlineBoth the application and the applet use the Loader class to load the AIML<br/>#Newlinerobot script. The Loader class extends Thread#Comma and runs "in the background"<br/>#Newlinewhile the GUI and#Comma in the case of the application#Comma the web server start.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS PARSER,*,*,<br/>#NewlineThe Parser class is responsible for the evaluation of AIML<br/>#Newlineresponse templates.  The method pfkh() [the Program Formerly<br/>#NewlineKnown as Hello] is the heart of evaluation process.  This<br/>#Newlinemethod contains the code for recognizing and processing<br/>#NewlineAIML template tags.<br/>#Newline<br/>#NewlineThe Parser class does not parse all the AIML in the language<br/>#Newlinedefinition; it parses and evaluates only the templates at runtime.<br/>#NewlineAnother class#Comma AliceReader#Comma has the job of reading the AIML files <br/>#Newlineat load time#Comma and parsing the categories into topics#Comma patterns and templates. <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS ROBOTCOMMUNICATOR,*,*,<br/>#NewlineIf you want to customize your own application or applet then<br/>#Newlineyou might find RobotCommunicator is a useful class.  The<br/>#NewlineRobotCommunicator abstracts the combination of a scrolling TextArea <br/>#Newlineoutput display with a TextField input area input field.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS SORTEDINTSET,*,*,<br/>#NewlineThe sorted version of IntSet#Comma SortedIntSet maintains its<br/>#Newlineelements in a sorted array.  Throughout program B you will<br/>#Newlinefind many loops utilizing instances of SortedIntSet.  These<br/>#Newlineobjects provide an efficient means to locate items in<br/>#Newline"rank order"#Comma the highest numbered items first and the<br/>#Newlinesmallest numbers last.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS STRINGHISTOGRAMMER,*,*,<br/>#NewlineStringHistogrammer extends StringSet and contains a map from<br/>#Newlineeach string to a count#Comma usually indicating the number of times<br/>#Newlinethat string appears in a sample of text.  A histogram is<br/>#Newlinelike a "bar graph" that counts occurances of each item.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS STRINGRANKER,*,*,<br/>#NewlineExtending StringHistogrammer#Comma StringRanker also sorts the <br/>#Newlinestrings by the histogram count.  The highest count string<br/>#Newlineis first#Comma the next highest count second#Comma and so on.  <br/>#Newline<br/>#NewlineThe concept of a StringRanker should be familiar to anyone<br/>#Newlinewho has ranked people#Comma companies or sports teams by any<br/>#Newlinenumber such as sales#Comma market capitilization#Comma or points scored.<br/>#NewlineOne application for a StringRanker is determining the<br/>#Newline"top 10 referers" in HTTP log file analysis (see<br/>#Newlinehttp://alicebot.org/mine.html).    <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS STRINGSET,*,*,<br/>#NewlineThe StringSet implements the abstract concept of a set of<br/>#Newlinestrings#Comma meaning that each string item appears at most once<br/>#Newlinein the setc.  <br/>#Newline<br/>#NewlineThe "set" means that the strings occur only once in instances<br/>#Newlineof object StringSet:  {"this"#Comma"that"#Comma"another"} is a set of<br/>#Newlinestrings; {"start"#Comma"start"#Comma"stop"} is not.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS STRINGSORTER,*,*,<br/>#NewlineStringSorter extends StringSet but enforces an alphabetical<br/>#Newlineordering of the Strings.  The StringSorter maintains its<br/>#Newlinedata structure dynamically#Comma so that the set remains sorted<br/>#Newlineafter each item is added.  Specifically#Comma the StringSorter uses<br/>#Newlinea binary-search algorithm for fast String insertion. <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS SUBSTITUTER,*,*,<br/>#NewlineThe static class Substituter contains a number of similar string substitution<br/>#Newlinemethods useful at several points in program B.<br/>#Newline<br/>#NewlineProgram B has the unique feature that it relies on HTTP GET methods#Comma<br/>#Newlinerather than POST methods#Comma to transmit chat inputs to the robot server.<br/>#NewlineHTTP inserts '+' characters in place of spaces#Comma and applies a series of<br/>#Newlinesubstitutions to eliminate many characters. The static method cleanup_http()<br/>#Newlineundoes these substitutions and restores the input string to the form similar<br/>#Newlineto what the client originally typed.<br/>#Newline<br/>#NewlineThe problem of segmenting strings into sentences is complicated by the<br/>#Newlineconventional use of periods to denote abbreviations like "Dr."#Comma "Mr."#Comma<br/>#Newlineand "St." The method deperiodize() applies a series of substitutions to<br/>#Newlineeliminate most common abbreviations. Like the other substitution methods<br/>#Newlinein this class#Comma the deperiodize() method has an associated static data member<br/>#Newlineof class String[][2]#Comma which stores the substitution map.<br/>#Newline<br/>#NewlineThe patterns in AIML are written in normalized form. The method normalize()<br/>#Newlineconverts a string to normal form by the following steps:<br/>#Newline<br/>#Newline1. Remove all punctuation (inputs assumed to be individual sentences)<br/>#Newline<br/>#Newline2. Convert string to upper case<br/>#Newline<br/>#Newline3. Place exactly one space between words<br/>#Newline<br/>#Newline4. Expand all contractions<br/>#Newline<br/>#Newline5. Correct a few common spelling mistakes<br/>#Newline<br/>#Newline6. Return a "Trimmed" string<br/>#Newline<br/>#NewlineThe justification for removing all punctuation from text inputs<br/>#Newlineis explained by the need to make the chatterbot compatible with speech<br/>#Newlineinputs#Comma which of course contains no punctuation.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS UNIFIER,*,*,<br/>#NewlineUnification refers to the process of matching and binding. A unifier determines<br/>#Newlinewhether two sentences match and#Comma if so#Comma what any 'variables' in the pattern<br/>#Newlinebind to. In the case of AIML the only matching variable is the single '*'<br/>#Newlinesymbol. The Unifier class contains a 'star' data memeber to contain the<br/>#Newlinematched subsentence.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS CLASS WEBSERVER,*,*,<br/>#NewlineThe WebSever class implements a "faux" HTTP server#Comma i.e. a server that<br/>#Newlinelistens for HTTP connections and accepts them; then replies in properly<br/>#Newlineformatted HTML. The connecting client#Comma typically a browser#Comma cannot tell<br/>#Newlinethe difference between the chat robot server and a full-blown web server.<br/>#NewlineIn particular#Comma our WebServer implements only HTTP GET methods#Comma not POST<br/>#Newlinemethods.  Our WebServer class does not implement many of the other features <br/>#Newlineof ordinary web servers; although it is a multithreaded server.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS LT LOAD FILENAME X GT,*,*,<br/>#NewlineThe template may contain a &lt;load/&gt; tag to recursively load an AIML<br/>#Newlinefile.  The semantics of a load are the same as a merge: categories<br/>#Newlineloaded first have priority; the server eliminates categories with<br/>#Newlineduplicate patterns.  <br/>#Newline<br/>#NewlineThe default robot file B.aiml contains the top-level load commands.<br/>#NewlineThere are several ways to "comment out" a &lt;load&gt; tag in order<br/>#Newlineto test your system with a smaller robot.  You can change the<br/>#Newlineline reading <br/>#Newline&lt;load filename="Brain.aiml"/&gt;<br/>#Newlineto <br/>#Newline&lt;noload filename="Brain.aiml"/&gt;<br/>#Newlineand the AIML parser will simply ignore the non-existent "noload"<br/>#Newlinecommand.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS LT STAR GT,*,*,<br/>#NewlineThe &lt;star&gt; tag indicates the input text fragment matching the pattern '*'.<br/>#NewlineRemember#Comma &lt;star/&gt; is an XML abbreviation for &lt;star&gt;&lt;/star&gt;.<br/>#Newline<br/>#Newline&lt;star/&gt;   the value of "*" matched by the pattern.<br/>#Newline                  <br/>,std-dont.aiml
0,WHAT IS LT THAT GT,*,*,<br/>#NewlineThe keyword "that" in ALICE refers to whatever the robot said before<br/>#Newlinea user input.  Conceptually the choice of "that" comes from the<br/>#Newlineobservation of the role of the word "that" in dialogue fragments like:<br/>#Newline<br/>#NewlineRobot:  Today is yesterday.<br/>#NewlineClient: That makes no sense.<br/>#Newline<br/>#NewlineRobot:  The answer is 3.14159<br/>#NewlineClient: That is cool.<br/>#Newline<br/>#NewlineIn AIML the syntax &lt;that&gt;...&lt;/that&gt; permits an optional "ThatPattern"<br/>#Newlineto match the robot's "that" expression.  A common example using "that"<br/>#Newlineis any yes-no question:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;YES&lt;/pattern&gt;<br/>#Newline&lt;that&gt; DO YOU LIKE MOVIES &lt;/that&gt;<br/>#Newline&lt;template&gt; What's your favorite movie? &lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThis category handles the user input "YES" and checks to see whether<br/>#Newlinethe client is replying to the question "What's your favorite movie?".<br/>#Newline<br/>#NewlineOne interesting application of "that" are the categories that<br/>#Newlineenable a robot to respond to "knock-knock" jokes:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;KNOCK KNOCK&lt;/pattern&gt;<br/>#Newline&lt;template&gt;Who's there?&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;*&lt;/pattern&gt;<br/>#Newline&lt;that&gt;WHO IS THERE&lt;/that&gt;<br/>#Newline&lt;template&gt;&lt;person/&gt; Who?&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;*&lt;/pattern&gt;<br/>#Newline&lt;that&gt;* WHO&lt;/that&gt;<br/>#Newline&lt;template&gt;Ha ha very funny#Comma &lt;getname/&gt;&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineClient: KNOCK KNOCK<br/>#NewlineRobot:  Who's there? <br/>#NewlineClient: BANANA<br/>#NewlineRobot:  banana Who? <br/>#NewlineClient: KNOCK KNOCK<br/>#NewlineRobot:  Who's there? <br/>#NewlineClient: BANANA<br/>#NewlineRobot:  banana Who? <br/>#NewlineClient: KNOCK KNOCK<br/>#NewlineRobot:  Who's there? <br/>#NewlineClient: ORANGE<br/>#NewlineRobot:  orange Who? <br/>#NewlineClient: ORANGE YOU GLAD I DID NOT SAY BANANA<br/>#NewlineRobot:  Ha ha very funny#Comma Aol-person <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS LT THINK GT,*,*,<br/>#NewlineThe simple purpose of the &lt;think&gt; X &lt;/think&gt; tag pair is<br/>#Newlineto evaluate the AIML expression X#Comma but "nullify" or hide<br/>#Newlinethe result from the client reply.<br/>#Newline<br/>#NewlineA simple example:<br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;I AM FEMALE&lt;/pattern&gt;<br/>#Newline&lt;template&gt;Thanks for telling me your gender. &lt;think&gt;&lt;set_female/&gt;&lt;/think&gt;<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThe &lt;set_female/&gt; tag normally returns a string like "she".  But the<br/>#Newline&lt;think&gt; tag hides the text output of &lt;set_female/&gt; from the reply#Comma<br/>#Newlinewhich contains only the text:<br/>#Newline<br/>#NewlineThanks for telling me your gender.  <br/>#Newline  <br/>,std-dont.aiml
0,WHAT IS NEW IN AIML,*,*,<br/>#NewlineAIML is changing.   The original tag syntax was changed<br/>#Newlineinto XML.  Right now#Comma AIML uses XML syntax for the<br/>#Newlinecategories#Comma patterns#Comma "that" patterns and templates#Comma but inside the <br/>#Newline&lt;template&gt; tag you may still see the original +~ syntax in a few places.  <br/>#NewlineBut this will change soon.  For completeness program B<br/>#Newlinesupports both versions.<br/>#Newline<br/>#NewlineThe biggest change between the old AIML and the new<br/>#NewlineXML version of AIML is the elimination of the "+"<br/>#Newlinecharacter to stand for string appendage.  The change<br/>#Newlineis of little concern except in the implementation of<br/>#Newline&lt;random&gt;#Comma discussed at length below.<br/>#Newline<br/>#NewlineThe old AIML used a tilde (~) markup character to<br/>#Newlineindicate the start of an AIML token.  The XML version<br/>#Newlinenaturally uses an SGML type tag syntax instead.<br/>#Newline<br/>#NewlineXML tags#Comma unlike HTML#Comma are case-sensitive.  Moreover#Comma XML syntax<br/>#Newlinerequires a closing tag of some kind.  The "empty" tags that contain<br/>#Newlineno text#Comma like &lt;A&gt;&lt;/A&gt; in HTML#Comma are written like &lt;A/&gt; in XML.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS ON THE HELP MENU,*,*,<br/>#Newline  Random Help - Same as "Help" button.<br/>#Newline<br/>#Newline  Show Help Questions - Displays a list of all FAQ questions.  Select<br/>#Newline    one by deleting all the others.  Obtain the answer with "Send." <br/>#Newline<br/>#Newline  Don't Read Me - Display the text of this document.<br/>#Newline<br/>#Newline  GNU Public License - Display the software license.<br/>#Newline  <br/>,std-dont.aiml
0,WHAT IS PROGRAM BAWT,*,*,<br/>#NewlineSignificant demand for a version of ALICE compatible with<br/>#Newlinepre- Java 2 (formerly known as Java 1.2) prompted the<br/>#Newlinedevelopment of "Bawt.java"#Comma an open source java program<br/>#Newlinefor chat robot development that works with older versions of<br/>#NewlineJava#Comma and AWT.  Originally program B relied on <br/>#NewlineJava 2 and Swing#Comma but program Bawt needs only Java 1.1 and AWT.<br/>#NewlineSwing is a newer GUI package that subsumes the earlier Java <br/>#NewlineAbstract Windows Toolkit (AWT).<br/>#Newline<br/>#NewlineAt present class B merely extends class Bawt.  Swing not<br/>#Newlinesupported.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE BOTMASTER MENU,*,*,<br/>#Newline  The Botmaster menu contains all the tools to help develop chat robots.<br/>#Newline<br/>#Newline  Classify - same as Classify button<br/>#Newline<br/>#Newline  Default Targets - display targets obtained from<br/>#Newline   the Default ('*') category#Comma<br/>#Newline   in a format suitable for <br/>#Newline   quick conversion to new AIML.<br/>#Newline<br/>#Newline  Recursive Targets - display targets from "recursive" categories#Comma<br/>#Newline    i.e. categories with a template containing<br/>#Newline    the AIML &lt;sr/&gt; or &lt;srai/&gt; functions.<br/>#Newline<br/>#Newline  Autochat - The robot chats with herself; sometimes helpful<br/>#Newline    in detecting conversation "loops".<br/>#Newline<br/>#Newline  Add AIML - Clear the screen and type a line of AIML.  Selecting<br/>#Newline    "Add AIML" adds this new category to the chatbot.  You can<br/>#Newline    test the bot with "Send" and "Classify"#Comma then save it with<br/>#Newline    "File/Save Robot".<br/>#Newline  <br/>#Newline    In general you can add any number of new AIML categories<br/>#Newline    to the bot with "Add AIML."  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE CLASS STRUCTURE OF PROGRAM B,*,*,<br/>#NewlineThe core functionality of program B resides in the file<br/>#NewlineClassifier.java.  In that file#Comma you find a class hierarchy<br/>#Newlinefrom "String" to "Brain" and finally "Classifier."  <br/>#NewlineA branch in that hierarchy contains classes for histogramming<br/>#Newlineand ranking.  <br/>#Newline<br/>#NewlineThe first branch of the class hierarchy derives class Brain<br/>#Newlinefrom StringSorter#Comma extending StringSet.  The second branch<br/>#Newlineextends StringSet to StringHistogrammer and on to StringRanker.<br/>#NewlineThe final class Brain extends StringSet and uses StringRanker.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE DIFFERENCE BETWEEN B AND C,*,*,<br/>#NewlineAIML is a platform-independent#Comma language-independent specification<br/>#Newlinefor creating chat robots like ALICE.  The original AIML interpreter<br/>#Newlineran in SETL.  The next one developed was program B#Comma the Java program<br/>#Newlinewhich is the subject of this document.  Most recently new threads<br/>#Newlineof C/C++ development have led to "program C"#Comma actually a collection<br/>#Newlineof C/C++ programs and applications including Cgi-ALICE#Comma IRC-ALICE and<br/>#NewlineWinALICE.  See the web sites http://c.alicebot.com and<br/>#Newlinehttp://hippie.alicebot.com for more details.  <br/>#Newline<br/>#NewlineProgram B remains the most stable#Comma general purpose chat robot<br/>#Newlineprogram in the AIML family.  This Java implementation has been<br/>#Newlinesubject to intense peer review over a period of years#Comma evolving<br/>#Newlineinto a remarkably bug-free#Comma efficient and reabable piece of<br/>#Newlinesoftware.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE DTD FOR AIML,*,*,<br/>#NewlineReal XML fanatics know that because AIML is an XML language it<br/>#Newlinemust have something called a DTD (Document Template Descriptor).<br/>#NewlineThe DTD is a formal specification of the grammar for an XML language.<br/>#NewlineUnless you are using special XML tools to work on your AIML or<br/>#Newlinedeveloping your own parser for AIML#Comma you probably do not need to know <br/>#Newlinemuch about the DTD.<br/>#Newline<br/>#NewlineOur DTD reflects the current content of the *.aiml files that program B can <br/>#Newlineactually parse.  The DTD will become more general as the parser<br/>#Newlineimproves. <br/>#Newline<br/>#NewlineRather than reproduce the entire DTD here#Comma in order to shorten the<br/>#Newlinelength of this document#Comma we refer the reader to<br/>#Newlinethe A.L.I.C.E. XML page by John Friedman.  The URL for the AIML<br/>#NewlineDTD may be found on the page at http://XML.ALICEBot.Com.  <br/>#NewlineThe full URL for the DTD is <br/>#Newlinehttp://xml.alicebot.com/xml/aiml/alice.dtd<br/>#Newline<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE GOAL FOR AIML,*,*,<br/>#NewlineAIML (Artificial Intelligence Markup Language) is an XML specification<br/>#Newlinefor programming chat robots like ALICE using program B.  The emphasis<br/>#Newlinein the language design is minimalism.  The simplicity of AIML makes<br/>#Newlineit easy for non-programmers#Comma especially those who already know HTML#Comma <br/>#Newlineto get started writing chat robots.<br/>#Newline<br/>#NewlineOne ambitious goal for AIML is that#Comma if a number of people create their own<br/>#Newlinerobots#Comma each with a unique area of expertise#Comma program B can literally <br/>#Newlinemerge-sort them together into a Superbot#Comma automatically omitting <br/>#Newlineduplicate categories.  We offer the both the source code and the ALICE <br/>#Newlinecontent#Comma in order to encourage others will "open source" their chat <br/>#Newlinerobots as well#Comma to contribute to the Superbot.  <br/>#Newline<br/>#NewlineBotmasters are also of course free to copy protect private chat robots.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LOW LEVEL INTERFACE TO PROGRAM B,*,*,<br/>#NewlineIf you require only a graphical interface#Comma try using the<br/>#Newlineclass RobotCommunicator.  Depending on your application#Comma<br/>#Newlineyou may also try the Servlet interface or the applet.  <br/>#NewlineSome developers however  may want lower-level access to the<br/>#Newlinechat robot functions.<br/>#Newline<br/>#NewlineThe class Classifier in Classifier.java contains the low-level <br/>#Newlinemethods needed to interface directly to ALICE.  "Classifier" might <br/>#Newlineas well be called "Bot" because more than any other class#Comma <br/>#Newlineit handles those functions most unique to the chat robot.<br/>#Newline<br/>#NewlineThe method Classifier.multiline_response() is a key entry point <br/>#Newlineinto the conversation engine.   The "multiline" in <br/>#Newline"multiline_response" means that the input may contain <br/>#Newlinemultiple "lines" or sentences.   The first argument "query" to<br/>#Newlinemultiline_response is the input. The second argument "hname" is <br/>#Newlinethe virtual IP address of the client.  The third and last argument<br/>#Newlineis the class implementing the Responder interface.<br/>#Newline<br/>#NewlineIf the input string contains "Sentence1.  Sentence2?  Sentence3." <br/>#Newlinethen multiline_response might produce:<br/>#Newline<br/>#Newline&gt; Sentence1.<br/>#NewlineReply1<br/>#Newline&gt; Sentence2<br/>#NewlineReply2<br/>#Newline&gt; Sentence3<br/>#NewlineReply3<br/>#Newline<br/>#NewlineThe method multiline_response hides all of the details <br/>#Newlineof sentence segmentation#Comma responding to each input line individually#Comma <br/>#Newlineand formatting the output.  In particular multiline_response() <br/>#Newlinemay or may not append the VBScript needed to drive the MS<br/>#NewlineAgent output#Comma depending on whether the global MS Agent parameter is set.<br/>#Newline<br/>#NewlineThe argument "hname" is a key that indexes the client's conversation.  For<br/>#Newlinethe interface you need this can probably always be "localhost" or some<br/>#Newlineother constant.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LT PERSON GT TAG,*,*,<br/>#NewlineThe XML specification requires that every start tag such as<br/>#Newline&lt;person&gt; be followed by a matching end tag like &lt;/person&gt;.  <br/>#NewlineHTML is more relaxed about this requirement#Comma exemplified by<br/>#Newlinethe liberal use of the &lt;IMG&gt; tag without a corresponding &lt;/IMG&gt;.<br/>#NewlineXML supports a shorthand notation for the "atomic" tags.<br/>#NewlineThe &lt;star/&gt; tag is an example of a shorthand AIML tag.  <br/>#Newline&lt;person/&gt; is another example:<br/>#Newline<br/>#Newline&lt;person/&gt; = &lt;person&gt;&lt;star/&gt;&lt;/person&gt;<br/>#Newline<br/>#NewlineThis tag replaces the +~person(*)+ tag in old-style AIML.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LT PERSON2 GT TAG,*,*,<br/>#NewlineThis tag is an abbreviation:<br/>#Newline<br/>#Newline&lt;person2/&gt; = &lt;person2&gt;&lt;star/&gt;&lt;/person2&gt;<br/>#Newline<br/>#NewlineSee the FAQ question "What are the &lt;person&gt; tags?" for more<br/>#Newlineinformation about &lt;person2/&gt;.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LT PERSONF GT TAG,*,*,<br/>#NewlineThe value of &lt;personf/&gt; (a "formatted" personal pronoun transformation)<br/>#Newlineis shown by the example <br/>#Newline<br/>#Newline&lt;category&gt;<br/>#Newline&lt;pattern&gt;WHAT IS A *&lt;/pattern&gt;<br/>#Newline&lt;template&gt;<br/>#NewlineWhat does <br/>#Newline&lt;A HREF="http://www.dictionary.com/cgi-bin/dict.pl?term=&lt;personf/&gt;"&gt; <br/>#Newline&lt;set_it&gt; &lt;person/&gt; &lt;/set_it&gt; <br/>#Newline&lt;/A&gt; mean? &lt;BR&gt; <br/>#NewlineOr Ask Jeeves: <br/>#Newline&lt;A HREF="http://www.ask.com/AskJeeves.asp?ask=WHAT%20IS%20A%20&lt;personf/&gt;"&gt;<br/>#NewlineWhat is a &lt;person/&gt;?<br/>#Newline&lt;/A&gt;<br/>#Newline&lt;/template&gt;<br/>#Newline&lt;/category&gt;<br/>#Newline<br/>#NewlineThe search strings formatted for the Webster Dictionary and for<br/>#Newlinethe Ask.com search engine utilize &lt;personf/&gt;.  The effect is the<br/>#Newlinesame as &lt;person/&gt;#Comma but the formatting inserts an escaped "%20" in<br/>#Newlineplaces of the spaces returned by &lt;person/&gt;.  These escape sequences<br/>#Newlinepermit the HTTP GET methods to transmit multiple-word queries.   <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LT SRAI GT TAG,*,*,<br/>#NewlineThe recursive function &lt;srai&gt; stands for<br/>#Newline"Stimulus-Response artificial intelligence" and means<br/>#Newlinethat the text between the tags should be sent recursively<br/>#Newlineto the pattern matcher and the result interpreted.<br/>#NewlineThe resulting text replaces the original text in the markup.<br/>#Newline<br/>#Newline&lt;srai&gt; X &lt;/srai&gt;  calls the pattern matcher recursively on X.<br/>#Newline&lt;sr/&gt;             recursive call to chat robot<br/>#Newline<br/>#Newline&lt;sr/&gt; abbreviates &lt;srai&gt; &lt;star/&gt; &lt;/srai&gt;<br/>#Newline<br/>#NewlineNote: what happens if X contains AIML markup?  Does the interpreter<br/>#Newlinedo "lazy evaluation"?  Look at the source code and examine the<br/>#Newlinemethod pfkh()#Comma the Program Formerly Known as "Hello".<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE LT TOPIC GT TAG,*,*,<br/>#Newline1. &lt;topic&gt; allows ALICE to prefer responses that deal with the <br/>#Newlinetopic currently being discussed. This creates topical <br/>#Newlineconversation#Comma yet still has the ability to move from one subject <br/>#Newlineto another.<br/>#Newline2. &lt;topic&gt; allows ALICE to have duplicate patterns in different <br/>#Newlinecontexts (topics) allowing ALICE to have different responses to <br/>#Newlinethe same input patterns depending on the topic. For example#Comma <br/>#Newline"overriding" the " * " pattern for different topics. (I'll give <br/>#Newlinean example with this.)<br/>#Newline3. As always#Comma you can still use the &lt;gettopic/&gt; tag to refer to <br/>#Newlinethe topic in your output statements (templates).<br/>#Newline4. As always#Comma you can add topics on top of all your existing AIML <br/>#Newlineto keep your bot's current personality.  <br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE RESPONDER INTERFACE,*,*,<br/>#NewlineDeveloped to meet the needs of multiple ALICE<br/>#Newlineapplication scenarios#Comma the Responder interface<br/>#Newlinesimplifies the code in class Classifier for<br/>#Newlinenatural language queries.  The Responder defines<br/>#Newlinean interface with four members:<br/>#Newline<br/>#Newlinepre_process() : runs any initialization first.<br/>#Newlinelog() : tells how to log the conversation.<br/>#Newlineappend() : how to append response lines together.<br/>#Newlinepost_process() : runs after response loop finishes.<br/>#Newline<br/>#NewlineThe method Classifier.multiline_response() calls<br/>#Newlineall of the Responder methods.  See the next<br/>#Newlinequestion ("What is the low-level interface?")<br/>#Newlinefor more information about multiline_response().  <br/>#NewlineAt least five classes implement the Responder<br/>#Newlineinterface:<br/>#Newline<br/>#NewlineGUIResponder: the program B GUI uses this.<br/>#NewlineHTMLResponder: a class for Web Server HTML replies.<br/>#NewlineRobotResponder: this class used by RobotCommunicator<br/>#NewlineCustomResponder: a template for more Responder classes.<br/>#NewlineAppletResponder: the Applet code uses this class.<br/>#Newline<br/>#NewlineThese classes all handle special circumstances<br/>#Newlinefor the various Responder types: for example#Comma<br/>#NewlineHTMLResponder appends the client input to each<br/>#Newlineresponse; GUIResponder does not.   AppletResponder<br/>#Newlinelogs the dialogue through a network URL connection;<br/>#Newlineall other classes write to a local file.  RobotResponder#Comma<br/>#Newlineused by the Kid interface#Comma suppresses all the HTML<br/>#Newlinefrom robot replies; while HTMLResponder passes<br/>#Newlinethem through.  HTMLResponder also runs the optional<br/>#NewlineAnimagent class to create the MS Agent VB Script.<br/>#NewlineText-based Responder classes wrap the text; HTMLResponder<br/>#Newlineneed not wrap because the browser handles text formatting.<br/>#NewlineThe Responder interface addresses this wide variety of needs.<br/>#Newline<br/>,std-dont.aiml
0,WHAT IS THE THEORY BEHIND ALICE,*,*,<br/>#NewlineI used to say that there was NO theory behind ALICE: no neural network#Comma<br/>#Newlineno knowledge representation#Comma no search#Comma no fuzzy logic#Comma no genetic<br/>#Newlinealgorithms#Comma and no parsing.  Then I discovered there was a theory<br/>#Newlinecirculating in applied AI called "Case-Based Reasoning" or CBR that<br/>#Newlinemaps well onto the ALICE algorithm.  Another term#Comma borrowed from<br/>#Newlinepattern recognition#Comma is "nearest-neighbor classification."  <br/>#Newline<br/>#NewlineThe CBR "cases" are the categories in AIML.  The algorithm finds<br/>#Newlinebest-matching pattern for each input.  The category ties the<br/>#Newlineresponse template directly to the stimulus pattern.  ALICE is<br/>#Newlineconceptually not much more complicated that Weizenbaum's ELIZA <br/>#Newlinechat robot; the main differences are the much larger case base and the<br/>#Newlinetools for creating new content by dialog analysis.<br/>#Newline<br/>#NewlineALICE is also part of the tradition of "minimalist"#Comma "reactive" or<br/>#Newline"stimulus-response" robotics.  Mobile robots work best#Comma fastest and<br/>#Newlinedemonstrate the most animated#Comma realistic behavior when their sensory <br/>#Newlineinputs directly control the motor reactions.  Higher-level symbolic<br/>#Newlineprocessing#Comma search#Comma and planning#Comma tends to slow down the process <br/>#Newlinetoo much for realistic applications#Comma even with the fastest control<br/>#Newlinecomputers.  <br/>#Newline<br/>,std-dont.aiml
0,WHERE DOES THE LT TOPIC GT TAG APPEAR,*,*,<br/>#Newline  Topic tags are placed around one or more categories.  (Usually <br/>#Newlinemany.)  The categories (with each respective "pattern"#Comma "that"#Comma <br/>#Newlineand "template") within a set of &lt;topic&gt; &lt;/topic&gt; tags would be <br/>#Newlineassociated with the defined topic. The name of the topic would be <br/>#Newlinegiven by a "name" property in the beginning topic tag. Here would <br/>#Newlinebe the full AIML format with topic:<br/>#Newline<br/>#Newline&lt;alice&gt; <br/>#Newline <br/>#Newline &lt;topic name="THE TOPIC"&gt; <br/>#Newline<br/>#Newline  &lt;category&gt; <br/>#Newline   &lt;pattern&gt; phrase &lt;/pattern&gt; <br/>#Newline   &lt;that&gt; phrase &lt;/that&gt; <br/>#Newline   &lt;template&gt; phrase &lt;/template&gt; <br/>#Newline  &lt;/category&gt; <br/>#Newline<br/>#Newline &lt;/topic&gt; <br/>#Newline<br/>#Newline&lt;/alice&gt;<br/>#Newline<br/>,std-dont.aiml
0,WHY IS THE FORMAT OF THE OPTIONS GLOBALS TXT SO STRANGE,*,*,<br/>#NewlineDepending on your system#Comma you may see a globals.txt file that looks like:<br/>#Newline<br/>#NewlineAnimagent=true<br/>#NewlineBotmaster=Jon Baer<br/>#NewlineAnalysisFile=dialog.txt<br/>#NewlineClientLineContains=t:<br/>#NewlineLogFile=dialog.txt<br/>#NewlineCodeBase=D\:CHATTERBOTS\ALICE<br/>#NewlineStartLine=0<br/>#NewlineBeep=true<br/>#NewlineBotFile=B.aiml<br/>#NewlineAppletHost=206.184.206.210<br/>#NewlineEndLine=25000<br/>#NewlineBotName=ALICE<br/>#NewlineBirthday=November 23#Comma 1995<br/>#NewlineTempFile=Temp.ai<br/>#NewlineRobotLineStarts=Robot<br/>#Newline# ... and so on<br/>#Newline<br/>#NewlineThe global values seem to be stored in a random order.<br/>#NewlineThis is not a bug. The Globals class uses the Java methods<br/>#NewlineProperties.load() and Properties.store() to save the globals<br/>#Newlineto a file. You can also use # and ! to add comments to the file. <br/>#Newline<br/>#NewlineThe Properties class uses a hash table representation#Comma so does<br/>#Newlinenot preserve the order of the global variables.  The program<br/>#Newlinedisplays and saves the global options in an arbitrary order.<br/>#Newline <br/>#Newline<br/>,std-dont.aiml
